; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\tdrol\documents\visual studio 2010\Projects\parking\detector\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?DEFAULT_NOCTAVES@CommonParams@SIFT@cv@@2HB	; cv::SIFT::CommonParams::DEFAULT_NOCTAVES
PUBLIC	?DEFAULT_NOCTAVE_LAYERS@CommonParams@SIFT@cv@@2HB ; cv::SIFT::CommonParams::DEFAULT_NOCTAVE_LAYERS
PUBLIC	?DEFAULT_FIRST_OCTAVE@CommonParams@SIFT@cv@@2HB	; cv::SIFT::CommonParams::DEFAULT_FIRST_OCTAVE
PUBLIC	?DEFAULT_IS_NORMALIZE@DescriptorParams@SIFT@cv@@2_NB ; cv::SIFT::DescriptorParams::DEFAULT_IS_NORMALIZE
PUBLIC	?DESCRIPTOR_SIZE@DescriptorParams@SIFT@cv@@2HB	; cv::SIFT::DescriptorParams::DESCRIPTOR_SIZE
PUBLIC	?kKernelWidth@ORB@cv@@0HB			; cv::ORB::kKernelWidth
PUBLIC	?PATCH_SIZE@RandomizedTree@cv@@2EB		; cv::RandomizedTree::PATCH_SIZE
PUBLIC	?DEFAULT_DEPTH@RandomizedTree@cv@@2HB		; cv::RandomizedTree::DEFAULT_DEPTH
PUBLIC	?DEFAULT_VIEWS@RandomizedTree@cv@@2HB		; cv::RandomizedTree::DEFAULT_VIEWS
PUBLIC	?DEFAULT_REDUCED_NUM_DIM@RandomizedTree@cv@@2IB	; cv::RandomizedTree::DEFAULT_REDUCED_NUM_DIM
PUBLIC	?DEFAULT_TREES@RTreeClassifier@cv@@2HB		; cv::RTreeClassifier::DEFAULT_TREES
PUBLIC	?DEFAULT_NUM_QUANT_BITS@RTreeClassifier@cv@@2IB	; cv::RTreeClassifier::DEFAULT_NUM_QUANT_BITS
PUBLIC	?PATCH_SIZE@BriefDescriptorExtractor@cv@@2HB	; cv::BriefDescriptorExtractor::PATCH_SIZE
PUBLIC	?KERNEL_SIZE@BriefDescriptorExtractor@cv@@2HB	; cv::BriefDescriptorExtractor::KERNEL_SIZE
PUBLIC	?POSE_COUNT@Params@OneWayDescriptorMatcher@cv@@2HB ; cv::OneWayDescriptorMatcher::Params::POSE_COUNT
PUBLIC	?PATCH_WIDTH@Params@OneWayDescriptorMatcher@cv@@2HB ; cv::OneWayDescriptorMatcher::Params::PATCH_WIDTH
PUBLIC	?PATCH_HEIGHT@Params@OneWayDescriptorMatcher@cv@@2HB ; cv::OneWayDescriptorMatcher::Params::PATCH_HEIGHT
PUBLIC	?cell_bit_size_@DynamicBitset@@0IB		; DynamicBitset::cell_bit_size_
_DATA	SEGMENT
_threshold_high DQ 04059000000000000r		; 100
_threshold_low DQ 04040800000000000r		; 33
_threshold_scan DQ 03fc0000000000000r		; 0.125
_scale	DQ	03ff0000000000000r		; 1
_default_corners DD 0185H
	DD	0146H
	DD	01beH
	DD	0157H
	DD	015bH
	DD	0189H
	DD	0121H
	DD	0172H
	DD	0151H
	DD	0135H
	DD	0180H
	DD	0144H
	DD	011bH
	DD	0170H
	DD	0eaH
	DD	015cH
	DD	0121H
	DD	0126H
	DD	014cH
	DD	0133H
	DD	0e6H
	DD	015aH
	DD	0b9H
	DD	0148H
	DD	0f5H
	DD	0118H
	DD	011bH
	DD	0123H
	DD	0b5H
	DD	0146H
	DD	08dH
	DD	0137H
	DD	0ceH
	DD	010cH
	DD	0f0H
	DD	0116H
	DD	08aH
	DD	0135H
	DD	069H
	DD	0128H
	DD	0aaH
	DD	0101H
	DD	0c8H
	DD	010aH
	DD	065H
	DD	0126H
	DD	046H
	DD	011aH
	DD	08aH
	DD	0f8H
	DD	0a4H
	DD	0100H
	DD	042H
	DD	0118H
	DD	028H
	DD	010fH
_DATA	ENDS
;	COMDAT ?cell_bit_size_@DynamicBitset@@0IB
CONST	SEGMENT
?cell_bit_size_@DynamicBitset@@0IB DD 020H		; DynamicBitset::cell_bit_size_
CONST	ENDS
;	COMDAT ?PATCH_HEIGHT@Params@OneWayDescriptorMatcher@cv@@2HB
CONST	SEGMENT
?PATCH_HEIGHT@Params@OneWayDescriptorMatcher@cv@@2HB DD 018H ; cv::OneWayDescriptorMatcher::Params::PATCH_HEIGHT
CONST	ENDS
;	COMDAT ?PATCH_WIDTH@Params@OneWayDescriptorMatcher@cv@@2HB
CONST	SEGMENT
?PATCH_WIDTH@Params@OneWayDescriptorMatcher@cv@@2HB DD 018H ; cv::OneWayDescriptorMatcher::Params::PATCH_WIDTH
CONST	ENDS
;	COMDAT ?POSE_COUNT@Params@OneWayDescriptorMatcher@cv@@2HB
CONST	SEGMENT
?POSE_COUNT@Params@OneWayDescriptorMatcher@cv@@2HB DD 01f4H ; cv::OneWayDescriptorMatcher::Params::POSE_COUNT
CONST	ENDS
;	COMDAT ?KERNEL_SIZE@BriefDescriptorExtractor@cv@@2HB
CONST	SEGMENT
?KERNEL_SIZE@BriefDescriptorExtractor@cv@@2HB DD 09H	; cv::BriefDescriptorExtractor::KERNEL_SIZE
CONST	ENDS
;	COMDAT ?PATCH_SIZE@BriefDescriptorExtractor@cv@@2HB
CONST	SEGMENT
?PATCH_SIZE@BriefDescriptorExtractor@cv@@2HB DD 030H	; cv::BriefDescriptorExtractor::PATCH_SIZE
CONST	ENDS
;	COMDAT ?DEFAULT_NUM_QUANT_BITS@RTreeClassifier@cv@@2IB
CONST	SEGMENT
?DEFAULT_NUM_QUANT_BITS@RTreeClassifier@cv@@2IB DD 04H	; cv::RTreeClassifier::DEFAULT_NUM_QUANT_BITS
CONST	ENDS
;	COMDAT ?DEFAULT_TREES@RTreeClassifier@cv@@2HB
CONST	SEGMENT
?DEFAULT_TREES@RTreeClassifier@cv@@2HB DD 030H		; cv::RTreeClassifier::DEFAULT_TREES
CONST	ENDS
;	COMDAT ?DEFAULT_REDUCED_NUM_DIM@RandomizedTree@cv@@2IB
CONST	SEGMENT
?DEFAULT_REDUCED_NUM_DIM@RandomizedTree@cv@@2IB DD 0b0H	; cv::RandomizedTree::DEFAULT_REDUCED_NUM_DIM
CONST	ENDS
;	COMDAT ?DEFAULT_VIEWS@RandomizedTree@cv@@2HB
CONST	SEGMENT
?DEFAULT_VIEWS@RandomizedTree@cv@@2HB DD 01388H		; cv::RandomizedTree::DEFAULT_VIEWS
CONST	ENDS
;	COMDAT ?DEFAULT_DEPTH@RandomizedTree@cv@@2HB
CONST	SEGMENT
?DEFAULT_DEPTH@RandomizedTree@cv@@2HB DD 09H		; cv::RandomizedTree::DEFAULT_DEPTH
CONST	ENDS
;	COMDAT ?PATCH_SIZE@RandomizedTree@cv@@2EB
CONST	SEGMENT
?PATCH_SIZE@RandomizedTree@cv@@2EB DB 020H		; cv::RandomizedTree::PATCH_SIZE
CONST	ENDS
;	COMDAT ?kKernelWidth@ORB@cv@@0HB
CONST	SEGMENT
?kKernelWidth@ORB@cv@@0HB DD 05H			; cv::ORB::kKernelWidth
CONST	ENDS
;	COMDAT ?DESCRIPTOR_SIZE@DescriptorParams@SIFT@cv@@2HB
CONST	SEGMENT
?DESCRIPTOR_SIZE@DescriptorParams@SIFT@cv@@2HB DD 080H	; cv::SIFT::DescriptorParams::DESCRIPTOR_SIZE
CONST	ENDS
;	COMDAT ?DEFAULT_IS_NORMALIZE@DescriptorParams@SIFT@cv@@2_NB
CONST	SEGMENT
?DEFAULT_IS_NORMALIZE@DescriptorParams@SIFT@cv@@2_NB DB 01H ; cv::SIFT::DescriptorParams::DEFAULT_IS_NORMALIZE
CONST	ENDS
;	COMDAT ?DEFAULT_FIRST_OCTAVE@CommonParams@SIFT@cv@@2HB
CONST	SEGMENT
?DEFAULT_FIRST_OCTAVE@CommonParams@SIFT@cv@@2HB DD 0ffffffffH ; cv::SIFT::CommonParams::DEFAULT_FIRST_OCTAVE
CONST	ENDS
;	COMDAT ?DEFAULT_NOCTAVE_LAYERS@CommonParams@SIFT@cv@@2HB
CONST	SEGMENT
?DEFAULT_NOCTAVE_LAYERS@CommonParams@SIFT@cv@@2HB DD 03H ; cv::SIFT::CommonParams::DEFAULT_NOCTAVE_LAYERS
CONST	ENDS
;	COMDAT ?DEFAULT_NOCTAVES@CommonParams@SIFT@cv@@2HB
CONST	SEGMENT
?DEFAULT_NOCTAVES@CommonParams@SIFT@cv@@2HB DD 04H	; cv::SIFT::CommonParams::DEFAULT_NOCTAVES
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?is_num@@YA_NPBD@Z				; is_num
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\tdrol\documents\visual studio 2010\projects\parking\detector\main.cpp
;	COMDAT ?is_num@@YA_NPBD@Z
_TEXT	SEGMENT
_l$140014 = -20						; size = 4
_i$140013 = -8						; size = 4
_str$ = 8						; size = 4
?is_num@@YA_NPBD@Z PROC					; is_num, COMDAT

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 54   : 	for (size_t i = 0, l = strlen(str); i < l; i++)

	mov	DWORD PTR _i$140013[ebp], 0
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _l$140014[ebp], eax
	jmp	SHORT $LN5@is_num
$LN4@is_num:
	mov	eax, DWORD PTR _i$140013[ebp]
	add	eax, 1
	mov	DWORD PTR _i$140013[ebp], eax
$LN5@is_num:
	mov	eax, DWORD PTR _i$140013[ebp]
	cmp	eax, DWORD PTR _l$140014[ebp]
	jae	SHORT $LN3@is_num

; 55   : 	{
; 56   : 		if (str[i] > '9' || str[i] < '0')

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$140013[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN1@is_num
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$140013[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jge	SHORT $LN2@is_num
$LN1@is_num:

; 57   : 		{
; 58   : 			return false;

	xor	al, al
	jmp	SHORT $LN6@is_num
$LN2@is_num:

; 59   : 		}
; 60   : 	}

	jmp	SHORT $LN4@is_num
$LN3@is_num:

; 61   : 	return true;

	mov	al, 1
$LN6@is_num:

; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?is_num@@YA_NPBD@Z ENDP					; is_num
_TEXT	ENDS
PUBLIC	??_C@_0BE@HIJMBLDO@findFreeSpots?$CI?$CJ?$DN?$CFu?6?$AA@ ; `string'
PUBLIC	??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ; std::vector<Spot *,std::allocator<Spot *> >::~vector<Spot *,std::allocator<Spot *> >
PUBLIC	??1Mat@cv@@QAE@XZ				; cv::Mat::~Mat
PUBLIC	??_C@_0BM@PBLAMOIO@Failed?5to?5save?5image?5in?5?$CFs?6?$AA@ ; `string'
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??0Mat@cv@@QAE@XZ				; cv::Mat::Mat
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
PUBLIC	??A?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEAAPAUSpot@@I@Z ; std::vector<Spot *,std::allocator<Spot *> >::operator[]
PUBLIC	?size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::size
PUBLIC	?push_back@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXABQAUSpot@@@Z ; std::vector<Spot *,std::allocator<Spot *> >::push_back
PUBLIC	?resetStatus@Spot@@QAEXH@Z			; Spot::resetStatus
PUBLIC	??0Spot@@QAE@ABU0@@Z				; Spot::Spot
PUBLIC	??A?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEAAUSpot@@I@Z ; std::vector<Spot,std::allocator<Spot> >::operator[]
PUBLIC	?size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::size
PUBLIC	??0?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ; std::vector<Spot *,std::allocator<Spot *> >::vector<Spot *,std::allocator<Spot *> >
PUBLIC	??1Detector@@QAE@XZ				; Detector::~Detector
PUBLIC	??_C@_0CK@HEPILMF@Failed?5to?5load?5image?5from?5tempor@ ; `string'
PUBLIC	??0Detector@@QAE@XZ				; Detector::Detector
PUBLIC	??1?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@XZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::~unique_ptr<CameraDriver,std::default_delete<CameraDriver> >
PUBLIC	??_C@_0CC@CBGDFNCM@Failed?5to?5load?5image?5from?5camera@ ; `string'
PUBLIC	??C?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QBEPAVCameraDriver@@XZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::operator->
PUBLIC	??0?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@PAVCameraDriver@@@Z ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >
PUBLIC	??_C@_0GO@CFNIIOJA@?5Usage?3?5?9s?5spots?5list?0?5regexp?5fo@ ; `string'
PUBLIC	??_C@_0DC@OBNPEBMF@?5Error?3?5spots?5list?5length?5must?5b@ ; `string'
PUBLIC	?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ ; std::vector<Spot,std::allocator<Spot> >::clear
PUBLIC	??_C@_0EO@EEOIBHON@?5Usage?3?5?9s?5spots?5list?0?5regexp?5fo@ ; `string'
PUBLIC	??_C@_02DEDJNJGL@?9s?$AA@			; `string'
PUBLIC	??_C@_0BL@DFDIGCHI@?5Usage?3?5?9n?5threshold?5scan?6?$AA@ ; `string'
PUBLIC	??_C@_02MLFFLFHH@?9n?$AA@			; `string'
PUBLIC	??_C@_0BC@OALEALGD@?5Usage?3?5?9c?5scale?6?$AA@	; `string'
PUBLIC	??_C@_02HOPLMLDK@?9c?$AA@			; `string'
PUBLIC	??_C@_0BK@IHPDFHL@?5Usage?3?5?9l?5threshold?5low?6?$AA@ ; `string'
PUBLIC	??_C@_02PJGDNHPF@?9l?$AA@			; `string'
PUBLIC	??_C@_0BL@DJADBHGK@?5Usage?3?5?9h?5threshold?5high?6?$AA@ ; `string'
PUBLIC	??_C@_02JNAPBCPB@?9h?$AA@			; `string'
PUBLIC	??_C@_0BI@PNDHBKHA@?5Usage?3?5?9o?5output?5file?6?$AA@ ; `string'
PUBLIC	??_C@_02NCEOIEDG@?9o?$AA@			; `string'
PUBLIC	??_C@_0BI@ICDCHCOI@?5Usage?3?5?9t?5camera?5type?6?$AA@ ; `string'
PUBLIC	??_C@_02HLHIEPKM@?9t?$AA@			; `string'
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_C@_05PDJBBECF@pause?$AA@			; `string'
PUBLIC	??_C@_0BL@PKGNIOMG@?5Usage?3?5?9a?5camera?5address?6?$AA@ ; `string'
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_C@_02EMMNKJLI@?9a?$AA@			; `string'
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?push_back@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXABUSpot@@@Z ; std::vector<Spot,std::allocator<Spot> >::push_back
PUBLIC	??0Spot@@QAE@XZ					; Spot::Spot
PUBLIC	??0?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::vector<Spot,std::allocator<Spot> >
PUBLIC	__$ArrayPad$
PUBLIC	_main
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?imwrite@cv@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV_InputArray@1@ABV?$vector@HV?$allocator@H@std@@@3@@Z:PROC ; cv::imwrite
EXTRN	?drawGrid@Detector@@QAEXAAVMat@cv@@AAV?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@@Z:PROC ; Detector::drawGrid
EXTRN	?cvtColor@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@HH@Z:PROC ; cv::cvtColor
EXTRN	??0_InputArray@cv@@QAE@ABVMat@1@@Z:PROC		; cv::_InputArray::_InputArray
EXTRN	??0_OutputArray@cv@@QAE@AAVMat@1@@Z:PROC	; cv::_OutputArray::_OutputArray
EXTRN	?displayGrid@Detector@@QAEXAAV?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@@Z:PROC ; Detector::displayGrid
EXTRN	?findFreeSpots@Detector@@QAEXAAV?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@N@Z:PROC ; Detector::findFreeSpots
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	?loadImage@Detector@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@NNN@Z:PROC ; Detector::loadImage
EXTRN	__imp__printf:PROC
EXTRN	?factory@CameraDriver@@SAPAV1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:PROC ; CameraDriver::factory
EXTRN	__imp__atoi:PROC
EXTRN	__imp__atof:PROC
EXTRN	__imp__system:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_0BE@HIJMBLDO@findFreeSpots?$CI?$CJ?$DN?$CFu?6?$AA@
CONST	SEGMENT
??_C@_0BE@HIJMBLDO@findFreeSpots?$CI?$CJ?$DN?$CFu?6?$AA@ DB 'findFreeSpot'
	DB	's()=%u', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PBLAMOIO@Failed?5to?5save?5image?5in?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BM@PBLAMOIO@Failed?5to?5save?5image?5in?5?$CFs?6?$AA@ DB 'Failed t'
	DB	'o save image in %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HEPILMF@Failed?5to?5load?5image?5from?5tempor@
CONST	SEGMENT
??_C@_0CK@HEPILMF@Failed?5to?5load?5image?5from?5tempor@ DB 'Failed to lo'
	DB	'ad image from temporary file', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CBGDFNCM@Failed?5to?5load?5image?5from?5camera@
CONST	SEGMENT
??_C@_0CC@CBGDFNCM@Failed?5to?5load?5image?5from?5camera@ DB 'Failed to l'
	DB	'oad image from camera', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GO@CFNIIOJA@?5Usage?3?5?9s?5spots?5list?0?5regexp?5fo@
CONST	SEGMENT
??_C@_0GO@CFNIIOJA@?5Usage?3?5?9s?5spots?5list?0?5regexp?5fo@ DB ' Usage:'
	DB	' -s spots list, regexp format: "(\d+ \d+ \d+ \d+ \d+ \d+ \d+ '
	DB	'\d+)( \d+ \d+ \d+ \d+ \d+ \d+ \d+ \d+)*"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OBNPEBMF@?5Error?3?5spots?5list?5length?5must?5b@
CONST	SEGMENT
??_C@_0DC@OBNPEBMF@?5Error?3?5spots?5list?5length?5must?5b@ DB ' Error: s'
	DB	'pots list length must be divisible by 8', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@EEOIBHON@?5Usage?3?5?9s?5spots?5list?0?5regexp?5fo@
CONST	SEGMENT
??_C@_0EO@EEOIBHON@?5Usage?3?5?9s?5spots?5list?0?5regexp?5fo@ DB ' Usage:'
	DB	' -s spots list, regexp format: "(\d+ \d+ \d+ \d+)( \d+ \d+ \d'
	DB	'+ \d+)*"', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DEDJNJGL@?9s?$AA@
CONST	SEGMENT
??_C@_02DEDJNJGL@?9s?$AA@ DB '-s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DFDIGCHI@?5Usage?3?5?9n?5threshold?5scan?6?$AA@
CONST	SEGMENT
??_C@_0BL@DFDIGCHI@?5Usage?3?5?9n?5threshold?5scan?6?$AA@ DB ' Usage: -n '
	DB	'threshold scan', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MLFFLFHH@?9n?$AA@
CONST	SEGMENT
??_C@_02MLFFLFHH@?9n?$AA@ DB '-n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OALEALGD@?5Usage?3?5?9c?5scale?6?$AA@
CONST	SEGMENT
??_C@_0BC@OALEALGD@?5Usage?3?5?9c?5scale?6?$AA@ DB ' Usage: -c scale', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02HOPLMLDK@?9c?$AA@
CONST	SEGMENT
??_C@_02HOPLMLDK@?9c?$AA@ DB '-c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IHPDFHL@?5Usage?3?5?9l?5threshold?5low?6?$AA@
CONST	SEGMENT
??_C@_0BK@IHPDFHL@?5Usage?3?5?9l?5threshold?5low?6?$AA@ DB ' Usage: -l th'
	DB	'reshold low', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PJGDNHPF@?9l?$AA@
CONST	SEGMENT
??_C@_02PJGDNHPF@?9l?$AA@ DB '-l', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DJADBHGK@?5Usage?3?5?9h?5threshold?5high?6?$AA@
CONST	SEGMENT
??_C@_0BL@DJADBHGK@?5Usage?3?5?9h?5threshold?5high?6?$AA@ DB ' Usage: -h '
	DB	'threshold high', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JNAPBCPB@?9h?$AA@
CONST	SEGMENT
??_C@_02JNAPBCPB@?9h?$AA@ DB '-h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PNDHBKHA@?5Usage?3?5?9o?5output?5file?6?$AA@
CONST	SEGMENT
??_C@_0BI@PNDHBKHA@?5Usage?3?5?9o?5output?5file?6?$AA@ DB ' Usage: -o out'
	DB	'put file', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02NCEOIEDG@?9o?$AA@
CONST	SEGMENT
??_C@_02NCEOIEDG@?9o?$AA@ DB '-o', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ICDCHCOI@?5Usage?3?5?9t?5camera?5type?6?$AA@
CONST	SEGMENT
??_C@_0BI@ICDCHCOI@?5Usage?3?5?9t?5camera?5type?6?$AA@ DB ' Usage: -t cam'
	DB	'era type', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02HLHIEPKM@?9t?$AA@
CONST	SEGMENT
??_C@_02HLHIEPKM@?9t?$AA@ DB '-t', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause?$AA@
CONST	SEGMENT
??_C@_05PDJBBECF@pause?$AA@ DB 'pause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PKGNIOMG@?5Usage?3?5?9a?5camera?5address?6?$AA@
CONST	SEGMENT
??_C@_0BL@PKGNIOMG@?5Usage?3?5?9a?5camera?5address?6?$AA@ DB ' Usage: -a '
	DB	'camera address', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EMMNKJLI@?9a?$AA@
CONST	SEGMENT
??_C@_02EMMNKJLI@?9a?$AA@ DB '-a', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$_main DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$_main
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_main DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_main$0
	DD	00H
	DD	FLAT:__unwindfunclet$_main$1
	DD	00H
	DD	FLAT:__unwindfunclet$_main$2
	DD	02H
	DD	FLAT:__unwindfunclet$_main$3
	DD	03H
	DD	FLAT:__unwindfunclet$_main$4
	DD	03H
	DD	FLAT:__unwindfunclet$_main$5
	DD	05H
	DD	FLAT:__unwindfunclet$_main$6
	DD	05H
	DD	FLAT:__unwindfunclet$_main$7
	DD	07H
	DD	FLAT:__unwindfunclet$_main$8
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT _main
_TEXT	SEGMENT
tv534 = -1080						; size = 4
tv542 = -1076						; size = 4
tv372 = -1076						; size = 4
tv473 = -1072						; size = 4
tv448 = -1072						; size = 4
tv382 = -1072						; size = 4
tv363 = -1072						; size = 4
$T162993 = -1064					; size = 4
$T162994 = -1052					; size = 4
$T162995 = -1040					; size = 4
$T162996 = -1028					; size = 4
$T162997 = -1016					; size = 4
$T162998 = -1004					; size = 4
$T162999 = -992						; size = 4
$T163000 = -980						; size = 4
$T163001 = -968						; size = 4
$T163002 = -956						; size = 4
$T163003 = -941						; size = 1
$T163004 = -932						; size = 4
$T163005 = -920						; size = 4
$T163006 = -908						; size = 4
$T163009 = -896						; size = 20
$T163010 = -868						; size = 20
$T163011 = -837						; size = 1
$T163012 = -828						; size = 20
$T163013 = -800						; size = 20
$T163014 = -772						; size = 4
$T163015 = -760						; size = 4
$T140699 = -748						; size = 32
_img$141061 = -516					; size = 56
_l$141039 = -452					; size = 4
_i$141038 = -440					; size = 4
_count$ = -428						; size = 4
_spot$141032 = -416					; size = 4
_l$141028 = -404					; size = 4
_i$141027 = -392					; size = 4
_spots$ = -380						; size = 20
_detector$ = -352					; size = 64
_camera$ = -280						; size = 4
_k$140452 = -268					; size = 4
_spot$140451 = -256					; size = 44
_j$140447 = -204					; size = 4
_j$140437 = -192					; size = 4
_numbers_count$140436 = -180				; size = 4
_arg$140362 = -168					; size = 32
_i$140358 = -128					; size = 4
_j$140354 = -116					; size = 4
_spot$140353 = -104					; size = 44
_i$140349 = -52						; size = 4
_corners$ = -40						; size = 20
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 65   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$_main
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1068				; 0000042cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1080]
	mov	ecx, 267				; 0000010bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 66   : #ifdef RUN_TESTS
; 67   : 	//TestClass tests;
; 68   : 	//tests.run();
; 69   : 	//system("pause");
; 70   : 	//return EXIT_SUCCESS;
; 71   : #endif
; 72   : 	
; 73   : 	vector<Spot> corners;

	lea	ecx, DWORD PTR _corners$[ebp]
	call	??0?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::vector<Spot,std::allocator<Spot> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 74   : 
; 75   : 	for (size_t i = 0; i < default_corners_length; i++)

	mov	DWORD PTR _i$140349[ebp], 0
	jmp	SHORT $LN62@main
$LN61@main:
	mov	eax, DWORD PTR _i$140349[ebp]
	add	eax, 1
	mov	DWORD PTR _i$140349[ebp], eax
$LN62@main:
	cmp	DWORD PTR _i$140349[ebp], 7
	jae	SHORT $LN60@main

; 76   : 	{
; 77   : 		Spot spot;

	lea	ecx, DWORD PTR _spot$140353[ebp]
	call	??0Spot@@QAE@XZ				; Spot::Spot

; 78   : 
; 79   : 		for (size_t j = 0; j < 4; j++)

	mov	DWORD PTR _j$140354[ebp], 0
	jmp	SHORT $LN59@main
$LN58@main:
	mov	eax, DWORD PTR _j$140354[ebp]
	add	eax, 1
	mov	DWORD PTR _j$140354[ebp], eax
$LN59@main:
	cmp	DWORD PTR _j$140354[ebp], 4
	jae	SHORT $LN57@main

; 80   : 		{
; 81   : 			spot.corners[j].x = default_corners[i][j][0];

	mov	eax, DWORD PTR _i$140349[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _j$140354[ebp]
	mov	edx, DWORD PTR _j$140354[ebp]
	mov	eax, DWORD PTR _default_corners[eax+edx*8]
	mov	DWORD PTR _spot$140353[ebp+ecx*8+4], eax

; 82   : 			spot.corners[j].y = default_corners[i][j][1];

	mov	eax, DWORD PTR _i$140349[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _j$140354[ebp]
	mov	edx, DWORD PTR _j$140354[ebp]
	mov	eax, DWORD PTR _default_corners[eax+edx*8+4]
	mov	DWORD PTR _spot$140353[ebp+ecx*8+8], eax

; 83   : 		}

	jmp	SHORT $LN58@main
$LN57@main:

; 84   : 		
; 85   : 		corners.push_back(spot);

	lea	eax, DWORD PTR _spot$140353[ebp]
	push	eax
	lea	ecx, DWORD PTR _corners$[ebp]
	call	?push_back@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXABUSpot@@@Z ; std::vector<Spot,std::allocator<Spot> >::push_back

; 86   : 	}

	jmp	SHORT $LN61@main
$LN60@main:

; 87   : 
; 88   : 	for (int i = 1; i < argc; i++)

	mov	DWORD PTR _i$140358[ebp], 1
	jmp	SHORT $LN56@main
$LN55@main:
	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	mov	DWORD PTR _i$140358[ebp], eax
$LN56@main:
	mov	eax, DWORD PTR _i$140358[ebp]
	cmp	eax, DWORD PTR _argc$[ebp]
	jge	$LN54@main

; 89   : 	{
; 90   : 		string arg = argv[i];

	mov	eax, DWORD PTR _i$140358[ebp]
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	lea	ecx, DWORD PTR _arg$140362[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 91   : 
; 92   : 		if (arg == "-a")

	push	OFFSET ??_C@_02EMMNKJLI@?9a?$AA@
	lea	eax, DWORD PTR _arg$140362[ebp]
	push	eax
	call	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN53@main

; 93   : 		{
; 94   : 			if (i + 1 >= argc || argv[i+1][0] == '-')

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _argc$[ebp]
	jge	SHORT $LN51@main
	mov	eax, DWORD PTR _i$140358[ebp]
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN52@main
$LN51@main:

; 95   : 			{
; 96   : 				fprintf(stderr, " Usage: -a camera address\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BL@PKGNIOMG@?5Usage?3?5?9a?5camera?5address?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 97   : 				return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T162993[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arg$140362[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T162993[ebp]
	jmp	$LN63@main
$LN52@main:

; 98   : 			}
; 99   : 
; 100  : 			camera_address = argv[++i];

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	mov	DWORD PTR _i$140358[ebp], eax
	mov	ecx, DWORD PTR _i$140358[ebp]
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, OFFSET _camera_address
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
	jmp	$LN25@main
$LN53@main:

; 101  : 		}
; 102  : 		else if (arg == "-t")

	push	OFFSET ??_C@_02HLHIEPKM@?9t?$AA@
	lea	eax, DWORD PTR _arg$140362[ebp]
	push	eax
	call	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN49@main

; 103  : 		{
; 104  : 			if (i + 1 >= argc || argv[i+1][0] == '-')

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _argc$[ebp]
	jge	SHORT $LN47@main
	mov	eax, DWORD PTR _i$140358[ebp]
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN48@main
$LN47@main:

; 105  : 			{
; 106  : 				fprintf(stderr, " Usage: -t camera type\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BI@ICDCHCOI@?5Usage?3?5?9t?5camera?5type?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 107  : 				return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T162994[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arg$140362[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T162994[ebp]
	jmp	$LN63@main
$LN48@main:

; 108  : 			}
; 109  : 
; 110  : 			camera_type = argv[++i];

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	mov	DWORD PTR _i$140358[ebp], eax
	mov	ecx, DWORD PTR _i$140358[ebp]
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, OFFSET _camera_type
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
	jmp	$LN25@main
$LN49@main:

; 111  : 		}
; 112  : 		else if (arg == "-o")

	push	OFFSET ??_C@_02NCEOIEDG@?9o?$AA@
	lea	eax, DWORD PTR _arg$140362[ebp]
	push	eax
	call	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN45@main

; 113  : 		{
; 114  : 			if (i + 1 >= argc || argv[i+1][0] == '-')

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _argc$[ebp]
	jge	SHORT $LN43@main
	mov	eax, DWORD PTR _i$140358[ebp]
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN44@main
$LN43@main:

; 115  : 			{
; 116  : 				fprintf(stderr, " Usage: -o output file\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BI@PNDHBKHA@?5Usage?3?5?9o?5output?5file?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 117  : 				return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T162995[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arg$140362[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T162995[ebp]
	jmp	$LN63@main
$LN44@main:

; 118  : 			}
; 119  : 
; 120  : 			output_file = argv[++i];

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	mov	DWORD PTR _i$140358[ebp], eax
	mov	ecx, DWORD PTR _i$140358[ebp]
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, OFFSET _output_file
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
	jmp	$LN25@main
$LN45@main:

; 121  : 		}
; 122  : 		else if (arg == "-h")

	push	OFFSET ??_C@_02JNAPBCPB@?9h?$AA@
	lea	eax, DWORD PTR _arg$140362[ebp]
	push	eax
	call	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN41@main

; 123  : 		{
; 124  : 			if (i + 1 >= argc || argv[i+1][0] == '-')

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _argc$[ebp]
	jge	SHORT $LN39@main
	mov	eax, DWORD PTR _i$140358[ebp]
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN40@main
$LN39@main:

; 125  : 			{
; 126  : 				fprintf(stderr, " Usage: -h threshold high\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BL@DJADBHGK@?5Usage?3?5?9h?5threshold?5high?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 127  : 				return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T162996[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arg$140362[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T162996[ebp]
	jmp	$LN63@main
$LN40@main:

; 128  : 			}
; 129  : 
; 130  : 			threshold_high = atof(argv[++i]);

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	mov	DWORD PTR _i$140358[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _i$140358[ebp]
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _threshold_high
	jmp	$LN25@main
$LN41@main:

; 131  : 		}
; 132  : 		else if (arg == "-l")

	push	OFFSET ??_C@_02PJGDNHPF@?9l?$AA@
	lea	eax, DWORD PTR _arg$140362[ebp]
	push	eax
	call	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN37@main

; 133  : 		{
; 134  : 			if (i + 1 >= argc || argv[i+1][0] == '-')

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _argc$[ebp]
	jge	SHORT $LN35@main
	mov	eax, DWORD PTR _i$140358[ebp]
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN36@main
$LN35@main:

; 135  : 			{
; 136  : 				fprintf(stderr, " Usage: -l threshold low\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BK@IHPDFHL@?5Usage?3?5?9l?5threshold?5low?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 137  : 				return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T162997[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arg$140362[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T162997[ebp]
	jmp	$LN63@main
$LN36@main:

; 138  : 			}
; 139  : 
; 140  : 			threshold_low = atof(argv[++i]);

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	mov	DWORD PTR _i$140358[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _i$140358[ebp]
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _threshold_low
	jmp	$LN25@main
$LN37@main:

; 141  : 		}
; 142  : 		else if (arg == "-c")

	push	OFFSET ??_C@_02HOPLMLDK@?9c?$AA@
	lea	eax, DWORD PTR _arg$140362[ebp]
	push	eax
	call	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN33@main

; 143  : 		{
; 144  : 			if (i + 1 >= argc || argv[i+1][0] == '-')

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _argc$[ebp]
	jge	SHORT $LN31@main
	mov	eax, DWORD PTR _i$140358[ebp]
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN32@main
$LN31@main:

; 145  : 			{
; 146  : 				fprintf(stderr, " Usage: -c scale\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BC@OALEALGD@?5Usage?3?5?9c?5scale?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 147  : 				return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T162998[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arg$140362[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T162998[ebp]
	jmp	$LN63@main
$LN32@main:

; 148  : 			}
; 149  : 
; 150  : 			scale = atof(argv[++i]);

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	mov	DWORD PTR _i$140358[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _i$140358[ebp]
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _scale
	jmp	$LN25@main
$LN33@main:

; 151  : 		}
; 152  : 		else if (arg == "-n")

	push	OFFSET ??_C@_02MLFFLFHH@?9n?$AA@
	lea	eax, DWORD PTR _arg$140362[ebp]
	push	eax
	call	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN29@main

; 153  : 		{
; 154  : 			if (i + 1 >= argc || argv[i+1][0] == '-')

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _argc$[ebp]
	jge	SHORT $LN27@main
	mov	eax, DWORD PTR _i$140358[ebp]
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN28@main
$LN27@main:

; 155  : 			{
; 156  : 				fprintf(stderr, " Usage: -n threshold scan\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BL@DFDIGCHI@?5Usage?3?5?9n?5threshold?5scan?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 157  : 				return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T162999[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arg$140362[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T162999[ebp]
	jmp	$LN63@main
$LN28@main:

; 158  : 			}
; 159  : 
; 160  : 			threshold_scan = atof(argv[++i]);

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	mov	DWORD PTR _i$140358[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _i$140358[ebp]
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _threshold_scan
	jmp	$LN25@main
$LN29@main:

; 161  : 		}
; 162  : 		else if (arg == "-s")

	push	OFFSET ??_C@_02DEDJNJGL@?9s?$AA@
	lea	eax, DWORD PTR _arg$140362[ebp]
	push	eax
	call	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN25@main

; 163  : 		{
; 164  : 			if (i + 8 >= argc)

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 8
	cmp	eax, DWORD PTR _argc$[ebp]
	jl	SHORT $LN24@main

; 165  : 			{
; 166  : 				fprintf(stderr, " Usage: -s spots list, regexp format: \"(\\d+ \\d+ \\d+ \\d+)( \\d+ \\d+ \\d+ \\d+)*\"\n");

	mov	esi, esp
	push	OFFSET ??_C@_0EO@EEOIBHON@?5Usage?3?5?9s?5spots?5list?0?5regexp?5fo@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 167  : 				return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T163000[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arg$140362[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T163000[ebp]
	jmp	$LN63@main
$LN24@main:

; 168  : 			}
; 169  : 
; 170  : 			corners.clear();

	lea	ecx, DWORD PTR _corners$[ebp]
	call	?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ ; std::vector<Spot,std::allocator<Spot> >::clear

; 171  : 			i++;

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, 1
	mov	DWORD PTR _i$140358[ebp], eax

; 172  : 
; 173  : 			size_t numbers_count = 0;

	mov	DWORD PTR _numbers_count$140436[ebp], 0

; 174  : 
; 175  : 			for (int j = i; j < argc; j++)

	mov	eax, DWORD PTR _i$140358[ebp]
	mov	DWORD PTR _j$140437[ebp], eax
	jmp	SHORT $LN23@main
$LN22@main:
	mov	eax, DWORD PTR _j$140437[ebp]
	add	eax, 1
	mov	DWORD PTR _j$140437[ebp], eax
$LN23@main:
	mov	eax, DWORD PTR _j$140437[ebp]
	cmp	eax, DWORD PTR _argc$[ebp]
	jge	SHORT $LN21@main

; 176  : 			{
; 177  : 				if ( ! is_num(argv[j]))

	mov	eax, DWORD PTR _j$140437[ebp]
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?is_num@@YA_NPBD@Z			; is_num
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN20@main

; 178  : 				{
; 179  : 					break;

	jmp	SHORT $LN21@main
$LN20@main:

; 180  : 				}
; 181  : 
; 182  : 				numbers_count++;

	mov	eax, DWORD PTR _numbers_count$140436[ebp]
	add	eax, 1
	mov	DWORD PTR _numbers_count$140436[ebp], eax

; 183  : 			}

	jmp	SHORT $LN22@main
$LN21@main:

; 184  : 
; 185  : 			if (numbers_count == 0 || numbers_count % 8 != 0)

	cmp	DWORD PTR _numbers_count$140436[ebp], 0
	je	SHORT $LN18@main
	mov	eax, DWORD PTR _numbers_count$140436[ebp]
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	test	edx, edx
	je	$LN19@main
$LN18@main:

; 186  : 			{
; 187  : 				fprintf(stderr, " Error: spots list length must be divisible by 8\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DC@OBNPEBMF@?5Error?3?5spots?5list?5length?5must?5b@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 188  : 				fprintf(stderr, " Usage: -s spots list, regexp format: \"(\\d+ \\d+ \\d+ \\d+ \\d+ \\d+ \\d+ \\d+)( \\d+ \\d+ \\d+ \\d+ \\d+ \\d+ \\d+ \\d+)*\"\n");

	mov	esi, esp
	push	OFFSET ??_C@_0GO@CFNIIOJA@?5Usage?3?5?9s?5spots?5list?0?5regexp?5fo@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 189  : 				return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T163001[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arg$140362[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T163001[ebp]
	jmp	$LN63@main
$LN19@main:

; 190  : 			}
; 191  : 
; 192  : 			for (size_t j = 0; j < numbers_count; j += 8)

	mov	DWORD PTR _j$140447[ebp], 0
	jmp	SHORT $LN17@main
$LN16@main:
	mov	eax, DWORD PTR _j$140447[ebp]
	add	eax, 8
	mov	DWORD PTR _j$140447[ebp], eax
$LN17@main:
	mov	eax, DWORD PTR _j$140447[ebp]
	cmp	eax, DWORD PTR _numbers_count$140436[ebp]
	jae	$LN15@main

; 193  : 			{
; 194  : 				Spot spot;

	lea	ecx, DWORD PTR _spot$140451[ebp]
	call	??0Spot@@QAE@XZ				; Spot::Spot

; 195  : 
; 196  : 				for (size_t k = 0; k < 4; k++)

	mov	DWORD PTR _k$140452[ebp], 0
	jmp	SHORT $LN14@main
$LN13@main:
	mov	eax, DWORD PTR _k$140452[ebp]
	add	eax, 1
	mov	DWORD PTR _k$140452[ebp], eax
$LN14@main:
	cmp	DWORD PTR _k$140452[ebp], 4
	jae	SHORT $LN12@main

; 197  : 				{
; 198  : 					spot.corners[k].x = atoi(argv[i + j + k*2 + 0]);

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, DWORD PTR _j$140447[ebp]
	mov	ecx, DWORD PTR _k$140452[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	esi, esp
	mov	eax, DWORD PTR _argv$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	DWORD PTR __imp__atoi
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _k$140452[ebp]
	mov	DWORD PTR _spot$140451[ebp+edx*8+4], eax

; 199  : 					spot.corners[k].y = atoi(argv[i + j + k*2 + 1]);

	mov	eax, DWORD PTR _i$140358[ebp]
	add	eax, DWORD PTR _j$140447[ebp]
	mov	ecx, DWORD PTR _k$140452[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	esi, esp
	mov	eax, DWORD PTR _argv$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	push	ecx
	call	DWORD PTR __imp__atoi
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _k$140452[ebp]
	mov	DWORD PTR _spot$140451[ebp+edx*8+8], eax

; 200  : 				}

	jmp	$LN13@main
$LN12@main:

; 201  : 
; 202  : 				corners.push_back(spot);

	lea	eax, DWORD PTR _spot$140451[ebp]
	push	eax
	lea	ecx, DWORD PTR _corners$[ebp]
	call	?push_back@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXABUSpot@@@Z ; std::vector<Spot,std::allocator<Spot> >::push_back

; 203  : 			}

	jmp	$LN16@main
$LN15@main:

; 204  : 
; 205  : 			i += numbers_count - 1; // -1 because i was incremeted at "i++;"

	mov	eax, DWORD PTR _numbers_count$140436[ebp]
	mov	ecx, DWORD PTR _i$140358[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _i$140358[ebp], edx
$LN25@main:

; 206  : 		}
; 207  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arg$140362[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	jmp	$LN55@main
$LN54@main:

; 208  : 
; 209  : 	unique_ptr<CameraDriver> camera(CameraDriver::factory(camera_type, camera_address));

	push	OFFSET _camera_address
	push	OFFSET _camera_type
	call	?factory@CameraDriver@@SAPAV1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CameraDriver::factory
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _camera$[ebp]
	call	??0?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@PAVCameraDriver@@@Z ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 210  : 
; 211  : 	if ( ! camera->isValid())

	lea	ecx, DWORD PTR _camera$[ebp]
	call	??C?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QBEPAVCameraDriver@@XZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::operator->
	mov	DWORD PTR tv363[ebp], eax
	mov	eax, DWORD PTR tv363[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv363[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN11@main

; 212  : 	{
; 213  : 		printf("Failed to load image from camera\n");

	mov	esi, esp
	push	OFFSET ??_C@_0CC@CBGDFNCM@Failed?5to?5load?5image?5from?5camera@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 214  : 		return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T163002[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _camera$[ebp]
	call	??1?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@XZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::~unique_ptr<CameraDriver,std::default_delete<CameraDriver> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T163002[ebp]
	jmp	$LN63@main
$LN11@main:

; 215  : 	}
; 216  : 
; 217  : 	Detector detector;

	lea	ecx, DWORD PTR _detector$[ebp]
	call	??0Detector@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 218  : 
; 219  : 	if ( ! detector.loadImage(camera->getImagePath(), threshold_low, threshold_high, scale))

	lea	ecx, DWORD PTR _camera$[ebp]
	call	??C?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QBEPAVCameraDriver@@XZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::operator->
	mov	DWORD PTR tv382[ebp], eax
	sub	esp, 8
	fld	QWORD PTR _scale
	fstp	QWORD PTR [esp]
	sub	esp, 8
	fld	QWORD PTR _threshold_high
	fstp	QWORD PTR [esp]
	sub	esp, 8
	fld	QWORD PTR _threshold_low
	fstp	QWORD PTR [esp]
	mov	esi, esp
	lea	eax, DWORD PTR $T140699[ebp]
	push	eax
	mov	ecx, DWORD PTR tv382[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv382[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv372[ebp], eax
	mov	ecx, DWORD PTR tv372[ebp]
	mov	DWORD PTR tv534[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR tv534[ebp]
	push	edx
	lea	ecx, DWORD PTR _detector$[ebp]
	call	?loadImage@Detector@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@NNN@Z ; Detector::loadImage
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	BYTE PTR $T163003[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T140699[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	movzx	ecx, BYTE PTR $T163003[ebp]
	test	ecx, ecx
	je	SHORT $LN10@main

; 220  : 	{
; 221  : 		printf("Failed to load image from temporary file\n");

	mov	esi, esp
	push	OFFSET ??_C@_0CK@HEPILMF@Failed?5to?5load?5image?5from?5tempor@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 222  : 		return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T163004[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _detector$[ebp]
	call	??1Detector@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _camera$[ebp]
	call	??1?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@XZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::~unique_ptr<CameraDriver,std::default_delete<CameraDriver> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T163004[ebp]
	jmp	$LN63@main
$LN10@main:

; 223  : 	}
; 224  : 
; 225  : 	vector<Spot *> spots;

	lea	ecx, DWORD PTR _spots$[ebp]
	call	??0?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ; std::vector<Spot *,std::allocator<Spot *> >::vector<Spot *,std::allocator<Spot *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 226  : 
; 227  : 	for (size_t i = 0, l = corners.size(); i < l; i++)

	mov	DWORD PTR _i$141027[ebp], 0
	lea	ecx, DWORD PTR _corners$[ebp]
	call	?size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::size
	mov	DWORD PTR _l$141028[ebp], eax
	jmp	SHORT $LN9@main
$LN8@main:
	mov	eax, DWORD PTR _i$141027[ebp]
	add	eax, 1
	mov	DWORD PTR _i$141027[ebp], eax
$LN9@main:
	mov	eax, DWORD PTR _i$141027[ebp]
	cmp	eax, DWORD PTR _l$141028[ebp]
	jae	$LN7@main

; 228  : 	{
; 229  : 		Spot *spot = new Spot(corners[i]);

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T163006[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T163006[ebp], 0
	je	SHORT $LN65@main
	mov	eax, DWORD PTR _i$141027[ebp]
	push	eax
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??A?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEAAUSpot@@I@Z ; std::vector<Spot,std::allocator<Spot> >::operator[]
	push	eax
	mov	ecx, DWORD PTR $T163006[ebp]
	call	??0Spot@@QAE@ABU0@@Z			; Spot::Spot
	mov	DWORD PTR tv448[ebp], eax
	jmp	SHORT $LN66@main
$LN65@main:
	mov	DWORD PTR tv448[ebp], 0
$LN66@main:
	mov	ecx, DWORD PTR tv448[ebp]
	mov	DWORD PTR $T163005[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR $T163005[ebp]
	mov	DWORD PTR _spot$141032[ebp], edx

; 230  : 
; 231  : 		spot->resetStatus(Free);

	push	0
	mov	ecx, DWORD PTR _spot$141032[ebp]
	call	?resetStatus@Spot@@QAEXH@Z		; Spot::resetStatus

; 232  : 
; 233  : 		spots.push_back(spot);

	lea	eax, DWORD PTR _spot$141032[ebp]
	push	eax
	lea	ecx, DWORD PTR _spots$[ebp]
	call	?push_back@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXABQAUSpot@@@Z ; std::vector<Spot *,std::allocator<Spot *> >::push_back

; 234  : 	}

	jmp	$LN8@main
$LN7@main:

; 235  : 
; 236  : 	detector.findFreeSpots(spots, threshold_scan);

	sub	esp, 8
	fld	QWORD PTR _threshold_scan
	fstp	QWORD PTR [esp]
	lea	eax, DWORD PTR _spots$[ebp]
	push	eax
	lea	ecx, DWORD PTR _detector$[ebp]
	call	?findFreeSpots@Detector@@QAEXAAV?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@N@Z ; Detector::findFreeSpots

; 237  : 
; 238  : 	int count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 239  : 	for (size_t i = 0, l = spots.size(); i < l; i++)

	mov	DWORD PTR _i$141038[ebp], 0
	lea	ecx, DWORD PTR _spots$[ebp]
	call	?size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::size
	mov	DWORD PTR _l$141039[ebp], eax
	jmp	SHORT $LN6@main
$LN5@main:
	mov	eax, DWORD PTR _i$141038[ebp]
	add	eax, 1
	mov	DWORD PTR _i$141038[ebp], eax
$LN6@main:
	mov	eax, DWORD PTR _i$141038[ebp]
	cmp	eax, DWORD PTR _l$141039[ebp]
	jae	SHORT $LN4@main

; 240  : 	{
; 241  : 		count += (spots[i]->status == Free);

	mov	eax, DWORD PTR _i$141038[ebp]
	push	eax
	lea	ecx, DWORD PTR _spots$[ebp]
	call	??A?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEAAPAUSpot@@I@Z ; std::vector<Spot *,std::allocator<Spot *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	DWORD PTR [ecx+36], 0
	sete	dl
	add	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _count$[ebp], edx

; 242  : 	}

	jmp	SHORT $LN5@main
$LN4@main:

; 243  : 
; 244  : 	if (output_file.empty())

	mov	ecx, OFFSET _output_file
	call	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@main

; 245  : 	{
; 246  : 		detector.displayGrid(spots);

	lea	eax, DWORD PTR _spots$[ebp]
	push	eax
	lea	ecx, DWORD PTR _detector$[ebp]
	call	?displayGrid@Detector@@QAEXAAV?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@@Z ; Detector::displayGrid

; 247  : 	}
; 248  : 	else

	jmp	$LN2@main
$LN3@main:

; 249  : 	{
; 250  : 		cv::Mat img;

	lea	ecx, DWORD PTR _img$141061[ebp]
	call	??0Mat@cv@@QAE@XZ			; cv::Mat::Mat
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 251  : 		cvtColor(detector.img, img, CV_GRAY2RGB);

	lea	eax, DWORD PTR _img$141061[ebp]
	push	eax
	lea	ecx, DWORD PTR $T163009[ebp]
	call	??0_OutputArray@cv@@QAE@AAVMat@1@@Z	; cv::_OutputArray::_OutputArray
	lea	ecx, DWORD PTR _detector$[ebp+8]
	push	ecx
	lea	ecx, DWORD PTR $T163010[ebp]
	call	??0_InputArray@cv@@QAE@ABVMat@1@@Z	; cv::_InputArray::_InputArray
	push	0
	push	8
	lea	edx, DWORD PTR $T163009[ebp]
	push	edx
	lea	eax, DWORD PTR $T163010[ebp]
	push	eax
	call	?cvtColor@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@HH@Z ; cv::cvtColor
	add	esp, 16					; 00000010H

; 252  : 		detector.drawGrid(img, spots);

	lea	eax, DWORD PTR _spots$[ebp]
	push	eax
	lea	ecx, DWORD PTR _img$141061[ebp]
	push	ecx
	lea	ecx, DWORD PTR _detector$[ebp]
	call	?drawGrid@Detector@@QAEXAAVMat@cv@@AAV?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@@Z ; Detector::drawGrid

; 253  : 		if ( ! imwrite(output_file, img))

	lea	eax, DWORD PTR _img$141061[ebp]
	push	eax
	lea	ecx, DWORD PTR $T163013[ebp]
	call	??0_InputArray@cv@@QAE@ABVMat@1@@Z	; cv::_InputArray::_InputArray
	lea	ecx, DWORD PTR $T163012[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR tv473[ebp], eax
	mov	ecx, DWORD PTR tv473[ebp]
	mov	DWORD PTR tv542[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	edx, DWORD PTR tv542[ebp]
	push	edx
	lea	eax, DWORD PTR $T163013[ebp]
	push	eax
	push	OFFSET _output_file
	call	?imwrite@cv@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV_InputArray@1@ABV?$vector@HV?$allocator@H@std@@@3@@Z ; cv::imwrite
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	BYTE PTR $T163011[ebp], cl
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T163012[ebp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	movzx	edx, BYTE PTR $T163011[ebp]
	test	edx, edx
	je	$LN1@main

; 254  : 		{
; 255  : 			printf("Failed to save image in %s\n", output_file.c_str());

	mov	ecx, OFFSET _output_file
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0BM@PBLAMOIO@Failed?5to?5save?5image?5in?5?$CFs?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 256  : 			return EXIT_FAILURE_PAUSE;

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause?$AA@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T163014[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _img$141061[ebp]
	call	??1Mat@cv@@QAE@XZ			; cv::Mat::~Mat
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _spots$[ebp]
	call	??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ; std::vector<Spot *,std::allocator<Spot *> >::~vector<Spot *,std::allocator<Spot *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _detector$[ebp]
	call	??1Detector@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _camera$[ebp]
	call	??1?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@XZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::~unique_ptr<CameraDriver,std::default_delete<CameraDriver> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T163014[ebp]
	jmp	SHORT $LN63@main
$LN1@main:

; 257  : 		}
; 258  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _img$141061[ebp]
	call	??1Mat@cv@@QAE@XZ			; cv::Mat::~Mat
$LN2@main:

; 259  : 
; 260  : 	printf("findFreeSpots()=%u\n", count);

	mov	esi, esp
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	OFFSET ??_C@_0BE@HIJMBLDO@findFreeSpots?$CI?$CJ?$DN?$CFu?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 261  : 
; 262  :     return EXIT_SUCCESS;

	mov	DWORD PTR $T163015[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _spots$[ebp]
	call	??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ; std::vector<Spot *,std::allocator<Spot *> >::~vector<Spot *,std::allocator<Spot *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _detector$[ebp]
	call	??1Detector@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _camera$[ebp]
	call	??1?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@XZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::~unique_ptr<CameraDriver,std::default_delete<CameraDriver> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _corners$[ebp]
	call	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
	mov	eax, DWORD PTR $T163015[ebp]
$LN63@main:

; 263  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN87@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1080				; 00000438H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN87@main:
	DD	9
	DD	$LN86@main
$LN86@main:
	DD	-40					; ffffffd8H
	DD	20					; 00000014H
	DD	$LN76@main
	DD	-104					; ffffff98H
	DD	44					; 0000002cH
	DD	$LN77@main
	DD	-168					; ffffff58H
	DD	32					; 00000020H
	DD	$LN78@main
	DD	-256					; ffffff00H
	DD	44					; 0000002cH
	DD	$LN79@main
	DD	-280					; fffffee8H
	DD	4
	DD	$LN80@main
	DD	-352					; fffffea0H
	DD	64					; 00000040H
	DD	$LN81@main
	DD	-380					; fffffe84H
	DD	20					; 00000014H
	DD	$LN82@main
	DD	-416					; fffffe60H
	DD	4
	DD	$LN83@main
	DD	-516					; fffffdfcH
	DD	56					; 00000038H
	DD	$LN84@main
$LN84@main:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	103					; 00000067H
	DB	0
$LN83@main:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN82@main:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN81@main:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN80@main:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	0
$LN79@main:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN78@main:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	0
$LN77@main:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN76@main:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_main$0:
	lea	ecx, DWORD PTR _corners$[ebp]
	jmp	??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
__unwindfunclet$_main$1:
	lea	ecx, DWORD PTR _arg$140362[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_main$2:
	lea	ecx, DWORD PTR _camera$[ebp]
	jmp	??1?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@XZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::~unique_ptr<CameraDriver,std::default_delete<CameraDriver> >
__unwindfunclet$_main$3:
	lea	ecx, DWORD PTR _detector$[ebp]
	jmp	??1Detector@@QAE@XZ
__unwindfunclet$_main$4:
	lea	ecx, DWORD PTR $T140699[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_main$5:
	lea	ecx, DWORD PTR _spots$[ebp]
	jmp	??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ; std::vector<Spot *,std::allocator<Spot *> >::~vector<Spot *,std::allocator<Spot *> >
__unwindfunclet$_main$6:
	mov	eax, DWORD PTR $T163006[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$_main$7:
	lea	ecx, DWORD PTR _img$141061[ebp]
	jmp	??1Mat@cv@@QAE@XZ			; cv::Mat::~Mat
__unwindfunclet$_main$8:
	lea	ecx, DWORD PTR $T163012[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$_main:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1084]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_main
	jmp	___CxxFrameHandler3
text$x	ENDS
_main	ENDP
PUBLIC	??0MStep@Mat@cv@@QAE@XZ				; cv::Mat::MStep::MStep
PUBLIC	??0MSize@Mat@cv@@QAE@PAH@Z			; cv::Mat::MSize::MSize
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\tdrol\lib\opencv\build\include\opencv2\core\mat.hpp
;	COMDAT ??0Mat@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Mat@cv@@QAE@XZ PROC					; cv::Mat::Mat, COMDAT
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0MSize@Mat@cv@@QAE@PAH@Z		; cv::Mat::MSize::MSize
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0MStep@Mat@cv@@QAE@XZ			; cv::Mat::MStep::MStep

; 62   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Mat@cv@@QAE@XZ ENDP					; cv::Mat::Mat
_TEXT	ENDS
PUBLIC	?release@Mat@cv@@QAEXXZ				; cv::Mat::release
EXTRN	?fastFree@cv@@YAXPAX@Z:PROC			; cv::fastFree
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1Mat@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Mat@cv@@QAE@XZ PROC					; cv::Mat::~Mat, COMDAT
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 295  :     release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?release@Mat@cv@@QAEXXZ			; cv::Mat::release

; 296  :     if( step.p != step.buf )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], eax
	je	SHORT $LN2@Mat

; 297  :         fastFree(step.p);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?fastFree@cv@@YAXPAX@Z			; cv::fastFree
	add	esp, 4
$LN2@Mat:

; 298  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Mat@cv@@QAE@XZ ENDP					; cv::Mat::~Mat
_TEXT	ENDS
EXTRN	?deallocate@Mat@cv@@QAEXXZ:PROC			; cv::Mat::deallocate
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?release@Mat@cv@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?release@Mat@cv@@QAEXXZ PROC				; cv::Mat::release, COMDAT
; _this$ = ecx

; 380  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 381  :     if( refcount && CV_XADD(refcount, -1) == 1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN1@release
	or	eax, -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	lock	 xadd	 DWORD PTR [edx], eax
	cmp	eax, 1
	jne	SHORT $LN1@release

; 382  :         deallocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@Mat@cv@@QAEXXZ		; cv::Mat::deallocate
$LN1@release:

; 383  :     data = datastart = dataend = datalimit = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 384  :     size.p[0] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx], 0

; 385  :     refcount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 386  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?release@Mat@cv@@QAEXXZ ENDP				; cv::Mat::release
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0MSize@Mat@cv@@QAE@PAH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__p$ = 8						; size = 4
??0MSize@Mat@cv@@QAE@PAH@Z PROC				; cv::Mat::MSize::MSize, COMDAT
; _this$ = ecx

; 701  : inline Mat::MSize::MSize(int* _p) : p(_p) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0MSize@Mat@cv@@QAE@PAH@Z ENDP				; cv::Mat::MSize::MSize
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0MStep@Mat@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0MStep@Mat@cv@@QAE@XZ PROC				; cv::Mat::MStep::MStep, COMDAT
; _this$ = ecx

; 730  : inline Mat::MStep::MStep() { p = buf; p[0] = p[1] = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0MStep@Mat@cv@@QAE@XZ ENDP				; cv::Mat::MStep::MStep
_TEXT	ENDS
PUBLIC	??0?$Point_@H@cv@@QAE@XZ			; cv::Point_<int>::Point_<int>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\tdrol\documents\visual studio 2010\projects\parking\detector\detector.h
;	COMDAT ??0Spot@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Spot@@QAE@XZ PROC					; Spot::Spot, COMDAT
; _this$ = ecx

; 32   : 	Spot() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0?$Point_@H@cv@@QAE@XZ		; cv::Point_<int>::Point_<int>
	push	4
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Spot@@QAE@XZ ENDP					; Spot::Spot
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0Spot@@QAE@ABU0@@Z
_TEXT	SEGMENT
_i$139877 = -20						; size = 4
_this$ = -8						; size = 4
_spot$ = 8						; size = 4
??0Spot@@QAE@ABU0@@Z PROC				; Spot::Spot, COMDAT
; _this$ = ecx

; 33   : 	Spot(const Spot &spot)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0?$Point_@H@cv@@QAE@XZ		; cv::Point_<int>::Point_<int>
	push	4
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 34   : 	{
; 35   : 		for (size_t i = 0; i < 4; i++)

	mov	DWORD PTR _i$139877[ebp], 0
	jmp	SHORT $LN3@Spot
$LN2@Spot:
	mov	eax, DWORD PTR _i$139877[ebp]
	add	eax, 1
	mov	DWORD PTR _i$139877[ebp], eax
$LN3@Spot:
	cmp	DWORD PTR _i$139877[ebp], 4
	jae	SHORT $LN4@Spot

; 36   : 		{
; 37   : 			corners[i].x = spot.corners[i].x;

	mov	eax, DWORD PTR _i$139877[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$139877[ebp]
	mov	esi, DWORD PTR _spot$[ebp]
	mov	edx, DWORD PTR [esi+edx*8+4]
	mov	DWORD PTR [ecx+eax*8+4], edx

; 38   : 			corners[i].y = spot.corners[i].y;

	mov	eax, DWORD PTR _i$139877[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$139877[ebp]
	mov	esi, DWORD PTR _spot$[ebp]
	mov	edx, DWORD PTR [esi+edx*8+8]
	mov	DWORD PTR [ecx+eax*8+8], edx

; 39   : 		}

	jmp	SHORT $LN2@Spot
$LN4@Spot:

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Spot@@QAE@ABU0@@Z ENDP				; Spot::Spot
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?resetStatus@Spot@@QAEXH@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_this$ = -8						; size = 4
_status_$ = 8						; size = 4
?resetStatus@Spot@@QAEXH@Z PROC				; Spot::resetStatus, COMDAT
; _this$ = ecx

; 43   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		switch (status_)

	mov	eax, DWORD PTR _status_$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@resetStatu
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN2@resetStatu
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN1@resetStatu
	jmp	SHORT $LN6@resetStatu
$LN3@resetStatu:

; 45   : 		{
; 46   : 		case 1:
; 47   : 			original_status = status = Free;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 48   : 			return;

	jmp	SHORT $LN6@resetStatu
$LN2@resetStatu:

; 49   : 		case 2:
; 50   : 			original_status = status = Occupied;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 1

; 51   : 			return;

	jmp	SHORT $LN6@resetStatu
$LN1@resetStatu:

; 52   : 		case 3:
; 53   : 			original_status = status = Blocked;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 2
$LN6@resetStatu:

; 54   : 			return;
; 55   : 		}
; 56   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?resetStatus@Spot@@QAEXH@Z ENDP				; Spot::resetStatus
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0Detector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Detector@@QAE@XZ PROC				; Detector::Detector, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0Mat@cv@@QAE@XZ			; cv::Mat::Mat
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Detector@@QAE@XZ ENDP				; Detector::Detector
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1Detector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Detector@@QAE@XZ PROC				; Detector::~Detector, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1Mat@cv@@QAE@XZ			; cv::Mat::~Mat
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Detector@@QAE@XZ ENDP				; Detector::~Detector
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T163073 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T163073[ebp], esp
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 593  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 594  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 753  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 754  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 768  : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 769  : 		return (assign(_Ptr));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 770  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1496 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1497 : 		return (_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr

; 1498 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1550 : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1551 : 		return (this->_Mysize == 0);

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+20], 0
	sete	cl
	mov	al, cl

; 1552 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T163098 = -212						; size = 4
_this$ = -8						; size = 4
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T163098[ebp], esp
	call	??0?$allocator@H@std@@QAE@XZ		; std::allocator<int>::allocator<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >

; 508  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 706  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z ; std::_Vector_val<Spot,std::allocator<Spot> >::_Vector_val<Spot,std::allocator<Spot> >
PUBLIC	??0?$allocator@USpot@@@std@@QAE@XZ		; std::allocator<Spot>::allocator<Spot>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T163111 = -212						; size = 4
_this$ = -8						; size = 4
??0?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ PROC ; std::vector<Spot,std::allocator<Spot> >::vector<Spot,std::allocator<Spot> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T163111[ebp], esp
	call	??0?$allocator@USpot@@@std@@QAE@XZ	; std::allocator<Spot>::allocator<Spot>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z ; std::_Vector_val<Spot,std::allocator<Spot> >::_Vector_val<Spot,std::allocator<Spot> >

; 508  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ENDP ; std::vector<Spot,std::allocator<Spot> >::vector<Spot,std::allocator<Spot> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::_Vector_val<Spot,std::allocator<Spot> >::~_Vector_val<Spot,std::allocator<Spot> >
PUBLIC	?_Tidy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXXZ ; std::vector<Spot,std::allocator<Spot> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ PROC ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXXZ ; std::vector<Spot,std::allocator<Spot> >::_Tidy

; 706  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::_Vector_val<Spot,std::allocator<Spot> >::~_Vector_val<Spot,std::allocator<Spot> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ; std::_Vector_val<Spot,std::allocator<Spot> >::~_Vector_val<Spot,std::allocator<Spot> >
__ehhandler$??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ENDP ; std::vector<Spot,std::allocator<Spot> >::~vector<Spot,std::allocator<Spot> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ PROC ; std::vector<Spot,std::allocator<Spot> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx

; 880  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ENDP ; std::vector<Spot,std::allocator<Spot> >::size
_TEXT	ENDS
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JC@OFGIBMFI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAS?$AAp?$AAo?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt@ ; `string'
PUBLIC	??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; `string'
PUBLIC	??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; `string'
PUBLIC	??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@OFGIBMFI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAS?$AAp?$AAo?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt@
CONST	SEGMENT
??_C@_1JC@OFGIBMFI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAS?$AAp?$AAo?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'S', 00H
	DB	'p', 00H, 'o', 00H, 't', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'S'
	DB	00H, 'p', 00H, 'o', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
CONST	SEGMENT
??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
CONST	SEGMENT
??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ DB 'Stand'
	DB	'ard C++ Libraries Out of Range', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??A?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEAAUSpot@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEAAUSpot@@I@Z PROC ; std::vector<Spot,std::allocator<Spot> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	$LN1@operator

; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");

	mov	esi, esp
	push	932					; 000003a4H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 933  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	mov	esi, esp
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	0
	push	933					; 000003a5H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	mov	esi, esp
	push	0
	push	933					; 000003a5H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1JC@OFGIBMFI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAS?$AAp?$AAo?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:

; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]

; 941  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEAAUSpot@@I@Z ENDP ; std::vector<Spot,std::allocator<Spot> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@ABU3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@ABU2@@Z ; std::_Cons_val<std::allocator<Spot>,Spot,Spot const &>
PUBLIC	??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@AAU3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@AAU2@@Z ; std::_Cons_val<std::allocator<Spot>,Spot,Spot &>
PUBLIC	?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z ; std::vector<Spot,std::allocator<Spot> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXI@Z ; std::vector<Spot,std::allocator<Spot> >::_Reserve
PUBLIC	?_Inside@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBE_NPBUSpot@@@Z ; std::vector<Spot,std::allocator<Spot> >::_Inside
PUBLIC	??$addressof@$$CBUSpot@@@std@@YAPBUSpot@@ABU1@@Z ; std::addressof<Spot const >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXABUSpot@@@Z
_TEXT	SEGMENT
__Idx$144133 = -20					; size = 4
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXABUSpot@@@Z PROC ; std::vector<Spot,std::allocator<Spot> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBUSpot@@@std@@YAPBUSpot@@ABU1@@Z ; std::addressof<Spot const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBE_NPBUSpot@@@Z ; std::vector<Spot,std::allocator<Spot> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBUSpot@@@std@@YAPBUSpot@@ABU1@@Z ; std::addressof<Spot const >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	DWORD PTR __Idx$144133[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN3@push_back

; 981  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXI@Z ; std::vector<Spot,std::allocator<Spot> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z ; std::vector<Spot,std::allocator<Spot> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR __Idx$144133[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@AAU3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@AAU2@@Z ; std::_Cons_val<std::allocator<Spot>,Spot,Spot &>
	add	esp, 12					; 0000000cH

; 986  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 987  : 			}
; 988  : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN1@push_back

; 991  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXI@Z ; std::vector<Spot,std::allocator<Spot> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z ; std::vector<Spot,std::allocator<Spot> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@ABU3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@ABU2@@Z ; std::_Cons_val<std::allocator<Spot>,Spot,Spot const &>
	add	esp, 12					; 0000000cH

; 996  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back:

; 997  : 			}
; 998  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXABUSpot@@@Z ENDP ; std::vector<Spot,std::allocator<Spot> >::push_back
_TEXT	ENDS
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::~_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::~_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
PUBLIC	?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z ; std::vector<Spot,std::allocator<Spot> >::erase
PUBLIC	?begin@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@XZ ; std::vector<Spot,std::allocator<Spot> >::begin
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
PUBLIC	?end@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@XZ ; std::vector<Spot,std::allocator<Spot> >::end
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ$2
__ehfuncinfo$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
tv149 = -332						; size = 4
tv154 = -328						; size = 4
tv151 = -324						; size = 4
tv158 = -320						; size = 4
tv148 = -316						; size = 4
tv157 = -312						; size = 4
tv146 = -308						; size = 4
tv156 = -304						; size = 4
$T163132 = -296						; size = 4
$T163133 = -284						; size = 12
$T163134 = -264						; size = 4
$T163135 = -252						; size = 12
$T163136 = -232						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ PROC ; std::vector<Spot,std::allocator<Spot> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1218 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T163133[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@XZ ; std::vector<Spot,std::allocator<Spot> >::end
	mov	DWORD PTR tv156[ebp], eax
	mov	ecx, DWORD PTR tv156[ebp]
	mov	DWORD PTR tv146[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T163132[ebp], esp
	mov	edx, DWORD PTR tv146[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv157[ebp], eax
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T163135[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@XZ ; std::vector<Spot,std::allocator<Spot> >::begin
	mov	DWORD PTR tv158[ebp], eax
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR tv151[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T163134[ebp], esp
	mov	eax, DWORD PTR tv151[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv154[ebp], eax
	lea	ecx, DWORD PTR $T163136[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z ; std::vector<Spot,std::allocator<Spot> >::erase
	mov	DWORD PTR tv149[ebp], eax
	lea	ecx, DWORD PTR $T163136[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T163135[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T163133[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ

; 1219 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ$0:
	lea	ecx, DWORD PTR $T163133[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ$1:
	mov	ecx, DWORD PTR $T163132[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T163135[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-336]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXXZ ENDP ; std::vector<Spot,std::allocator<Spot> >::clear
PUBLIC	??0?$_Unique_ptr_base@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@$00@std@@QAE@PAVCameraDriver@@U?$default_delete@VCameraDriver@@@1@@Z ; std::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>
PUBLIC	??0?$default_delete@VCameraDriver@@@std@@QAE@XZ	; std::default_delete<CameraDriver>::default_delete<CameraDriver>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??0?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@PAVCameraDriver@@@Z
_TEXT	SEGMENT
$T163150 = -209						; size = 1
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??0?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@PAVCameraDriver@@@Z PROC ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >, COMDAT
; _this$ = ecx

; 2230 : 		{	// construct with pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T163150[ebp]
	call	??0?$default_delete@VCameraDriver@@@std@@QAE@XZ ; std::default_delete<CameraDriver>::default_delete<CameraDriver>
	movzx	eax, BYTE PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Unique_ptr_base@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@$00@std@@QAE@PAVCameraDriver@@U?$default_delete@VCameraDriver@@@1@@Z ; std::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>

; 2231 : 		static_assert(!is_pointer<_Dx>::value,
; 2232 : 			"unique_ptr constructed with null deleter pointer");
; 2233 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@PAVCameraDriver@@@Z ENDP ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >
_TEXT	ENDS
PUBLIC	?_Delete@?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@AAEXXZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::_Delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@XZ PROC ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::~unique_ptr<CameraDriver,std::default_delete<CameraDriver> >, COMDAT
; _this$ = ecx

; 2300 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2301 : 		_Delete();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Delete@?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@AAEXXZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::_Delete

; 2302 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QAE@XZ ENDP ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::~unique_ptr<CameraDriver,std::default_delete<CameraDriver> >
_TEXT	ENDS
PUBLIC	??D?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QBEAAVCameraDriver@@XZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::operator*
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??C?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QBEPAVCameraDriver@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??C?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QBEPAVCameraDriver@@XZ PROC ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::operator->, COMDAT
; _this$ = ecx

; 2310 : 		{	// return pointer to class object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2311 : 		return (&**this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QBEAAVCameraDriver@@XZ ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::operator*

; 2312 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QBEPAVCameraDriver@@XZ ENDP ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::operator->
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z ; std::_Vector_val<Spot *,std::allocator<Spot *> >::_Vector_val<Spot *,std::allocator<Spot *> >
PUBLIC	??0?$allocator@PAUSpot@@@std@@QAE@XZ		; std::allocator<Spot *>::allocator<Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T163157 = -212						; size = 4
_this$ = -8						; size = 4
??0?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ PROC ; std::vector<Spot *,std::allocator<Spot *> >::vector<Spot *,std::allocator<Spot *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T163157[ebp], esp
	call	??0?$allocator@PAUSpot@@@std@@QAE@XZ	; std::allocator<Spot *>::allocator<Spot *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z ; std::_Vector_val<Spot *,std::allocator<Spot *> >::_Vector_val<Spot *,std::allocator<Spot *> >

; 508  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ENDP ; std::vector<Spot *,std::allocator<Spot *> >::vector<Spot *,std::allocator<Spot *> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ; std::_Vector_val<Spot *,std::allocator<Spot *> >::~_Vector_val<Spot *,std::allocator<Spot *> >
PUBLIC	?_Tidy@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXXZ ; std::vector<Spot *,std::allocator<Spot *> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ PROC ; std::vector<Spot *,std::allocator<Spot *> >::~vector<Spot *,std::allocator<Spot *> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXXZ ; std::vector<Spot *,std::allocator<Spot *> >::_Tidy

; 706  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ; std::_Vector_val<Spot *,std::allocator<Spot *> >::~_Vector_val<Spot *,std::allocator<Spot *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ; std::_Vector_val<Spot *,std::allocator<Spot *> >::~_Vector_val<Spot *,std::allocator<Spot *> >
__ehhandler$??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ENDP ; std::vector<Spot *,std::allocator<Spot *> >::~vector<Spot *,std::allocator<Spot *> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ PROC ; std::vector<Spot *,std::allocator<Spot *> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 880  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ENDP ; std::vector<Spot *,std::allocator<Spot *> >::size
_TEXT	ENDS
PUBLIC	??_C@_1JK@NLBMHKNE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAS?$AAp?$AAo?$AAt?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
;	COMDAT ??_C@_1JK@NLBMHKNE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAS?$AAp?$AAo?$AAt?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1JK@NLBMHKNE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAS?$AAp?$AAo?$AAt?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'S', 00H
	DB	'p', 00H, 'o', 00H, 't', 00H, ' ', 00H, '*', 00H, ',', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 'S', 00H, 'p', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'*', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o'
	DB	00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??A?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEAAPAUSpot@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEAAPAUSpot@@I@Z PROC ; std::vector<Spot *,std::allocator<Spot *> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	$LN1@operator@2

; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");

	mov	esi, esp
	push	932					; 000003a4H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 933  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator@2
	xor	ecx, ecx
	jne	SHORT $LN5@operator@2
$LN4@operator@2:
	mov	esi, esp
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	0
	push	933					; 000003a5H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator@2
	int	3
$LN5@operator@2:
	mov	esi, esp
	push	0
	push	933					; 000003a5H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1JK@NLBMHKNE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAS?$AAp?$AAo?$AAt?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:

; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 941  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEAAPAUSpot@@I@Z ENDP ; std::vector<Spot *,std::allocator<Spot *> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAUSpot@@@std@@PAUSpot@@ABQAU3@@std@@YAXAAV?$allocator@PAUSpot@@@0@PAPAUSpot@@ABQAU2@@Z ; std::_Cons_val<std::allocator<Spot *>,Spot *,Spot * const &>
PUBLIC	??$_Cons_val@V?$allocator@PAUSpot@@@std@@PAUSpot@@AAPAU3@@std@@YAXAAV?$allocator@PAUSpot@@@0@PAPAUSpot@@AAPAU2@@Z ; std::_Cons_val<std::allocator<Spot *>,Spot *,Spot * &>
PUBLIC	?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXI@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Reserve
PUBLIC	?_Inside@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBE_NPBQAUSpot@@@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Inside
PUBLIC	??$addressof@QAUSpot@@@std@@YAPBQAUSpot@@ABQAU1@@Z ; std::addressof<Spot * const>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXABQAUSpot@@@Z
_TEXT	SEGMENT
__Idx$144389 = -20					; size = 4
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXABQAUSpot@@@Z PROC ; std::vector<Spot *,std::allocator<Spot *> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAUSpot@@@std@@YAPBQAUSpot@@ABQAU1@@Z ; std::addressof<Spot * const>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBE_NPBQAUSpot@@@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAUSpot@@@std@@YAPBQAUSpot@@ABQAU1@@Z ; std::addressof<Spot * const>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
	mov	DWORD PTR __Idx$144389[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXI@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Idx$144389[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@PAUSpot@@@std@@PAUSpot@@AAPAU3@@std@@YAXAAV?$allocator@PAUSpot@@@0@PAPAUSpot@@AAPAU2@@Z ; std::_Cons_val<std::allocator<Spot *>,Spot *,Spot * &>
	add	esp, 12					; 0000000cH

; 986  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 987  : 			}
; 988  : 		else

	jmp	SHORT $LN5@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXI@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@PAUSpot@@@std@@PAUSpot@@ABQAU3@@std@@YAXAAV?$allocator@PAUSpot@@@0@PAPAUSpot@@ABQAU2@@Z ; std::_Cons_val<std::allocator<Spot *>,Spot *,Spot * const &>
	add	esp, 12					; 0000000cH

; 996  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back@2:

; 997  : 			}
; 998  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXABQAUSpot@@@Z ENDP ; std::vector<Spot *,std::allocator<Spot *> >::push_back
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::~_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::~_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
_TEXT	ENDS
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
_TEXT	ENDS
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::~_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::~_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
_TEXT	ENDS
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>
_TEXT	ENDS
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 116  : 		{	// copy an iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 117  : 		*this = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 118  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 121  : 		{	// assign an iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 		if (_Myproxy != _Right._Myproxy)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@operator@3

; 123  : 			_Adopt(_Right._Myproxy->_Mycont);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN1@operator@3:

; 124  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 125  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$11717 = -44					; size = 4
__Parent_proxy$11715 = -32				; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 136  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		if (_Parent != 0)

	cmp	DWORD PTR __Parent$[ebp], 0
	je	SHORT $LN3@Adopt

; 138  : 			{	// have a parent, do adoption
; 139  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$11715[ebp], ecx

; 140  : 
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 			if (_Myproxy != _Parent_proxy)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Parent_proxy$11715[ebp]
	je	SHORT $LN3@Adopt

; 143  : 				{	// change parentage
; 144  : 				_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$11717[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 145  : 				_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 146  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$11715[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 147  : 				_Parent_proxy->_Myfirstiter = this;

	mov	eax, DWORD PTR __Parent_proxy$11715[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 148  : 				_Myproxy = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$11715[ebp]
	mov	DWORD PTR [eax], ecx

; 149  : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$11717[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Adopt:

; 150  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 151  : 			_Myproxy = _Parent_proxy;
; 152  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 153  : 			}
; 154  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN9@Adopt:
	DD	1
	DD	$LN8@Adopt
$LN8@Adopt:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN6@Adopt
$LN6@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$11717[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JA@DBMECOPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JA@DBMECOPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JA@DBMECOPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H, 't'
	DB	00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$11727 = -20					; size = 4
_this$ = -8						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 172  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 173  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 174  : 		if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_me

; 175  : 			{	// adopted, remove self from list
; 176  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$11727[ebp], ecx
$LN3@Orphan_me:

; 177  : 			while (*_Pnext != 0 && *_Pnext != this)

	mov	eax, DWORD PTR __Pnext$11727[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Orphan_me
	mov	eax, DWORD PTR __Pnext$11727[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Orphan_me

; 178  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$11727[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$11727[ebp], ecx
	jmp	SHORT $LN3@Orphan_me
$LN2@Orphan_me:

; 179  : 
; 180  : 			if (*_Pnext == 0)

	mov	eax, DWORD PTR __Pnext$11727[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@Orphan_me

; 181  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

	mov	esi, esp
	push	181					; 000000b5H
	push	OFFSET ??_C@_1JA@DBMECOPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Orphan_me:

; 182  : 			*_Pnext = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$11727[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 183  : 			_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Orphan_me:

; 184  : 			}
; 185  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 186  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base12@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base12@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 128  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 129  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 130  : 		_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 131  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 132  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 133  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Iterator_b:
	DD	1
	DD	$LN6@Iterator_b
$LN6@Iterator_b:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@Iterator_b
$LN4@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z		; std::_Debug_pointer<char>
PUBLIC	??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
;	COMDAT ??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 929  : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 930  : 		_DEBUG_POINTER(_Ptr);

	push	930					; 000003a2H
	push	OFFSET ??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH

; 931  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 932  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 491  : 		return (_CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 492  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$144725 = -20					; size = 4
_this$ = -8						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1989 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Ptr$144725[ebp], ecx

; 1994 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$144725[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$144725[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate
$LN3@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 1999 : 		_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2000 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 498  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2009 : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv82[ebp], edx
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv82[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv82[ebp]

; 2012 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
EXTRN	__imp_??1_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Container_base12@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
$T163235 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 466  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$allocator@D@std@@QAE@ABV01@@Z	; std::allocator<char>::allocator<char>

; 467  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 468  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 469  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 470  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T163235[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 471  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@String_val
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN7@String_val:
	DD	1
	DD	$LN6@String_val
$LN6@String_val:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@String_val
$LN4@String_val:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 65   : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 66   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
EXTRN	__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 475  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 476  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 477  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 478  : 		this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 479  : 		_Dest_val(_Alproxy, this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
	add	esp, 8

; 480  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 481  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 482  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@String_val@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@String_val@2:
	DD	1
	DD	$LN6@String_val@2
$LN6@String_val@2:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@String_val@2
$LN4@String_val@2:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
$LN1@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1310 : 		this->_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1311 : 		this->_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1312 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
PUBLIC	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
$T163268 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z PROC ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 439  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>

; 440  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 441  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>

; 442  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 443  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T163268[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 444  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 445  : 
; 446  : 		_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 447  : 		_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 448  : 		_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 449  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@Vector_val:
	DD	1
	DD	$LN6@Vector_val
$LN6@Vector_val:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val
$LN4@Vector_val:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ENDP ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 452  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 453  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 454  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>

; 455  : 		this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 456  : 		_Dest_val(_Alproxy, this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
	add	esp, 8

; 457  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 458  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 459  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Vector_val@2:
	DD	1
	DD	$LN6@Vector_val@2
$LN6@Vector_val@2:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@2
$LN4@Vector_val@2:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T163296 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@XZ PROC ; std::vector<Spot,std::allocator<Spot> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T163296[ebp], 0

; 782  : 		return (iterator(this->_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
	mov	eax, DWORD PTR $T163296[ebp]
	or	eax, 1
	mov	DWORD PTR $T163296[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 783  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@XZ ENDP ; std::vector<Spot,std::allocator<Spot> >::begin
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T163301 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@XZ PROC ; std::vector<Spot,std::allocator<Spot> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T163301[ebp], 0

; 792  : 		return (iterator(this->_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
	mov	eax, DWORD PTR $T163301[ebp]
	or	eax, 1
	mov	DWORD PTR $T163301[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@XZ ENDP ; std::vector<Spot,std::allocator<Spot> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
PUBLIC	?_Destroy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXPAUSpot@@0@Z ; std::vector<Spot,std::allocator<Spot> >::_Destroy
PUBLIC	??$_Move@PAUSpot@@PAU1@@std@@YAPAUSpot@@PAU1@00@Z ; std::_Move<Spot *,Spot *>
PUBLIC	??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; `string'
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	??M?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator<
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator!=
PUBLIC	?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z ; std::vector<Spot,std::allocator<Spot> >::_Make_iter
;	COMDAT ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
CONST	SEGMENT
??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z$5
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
tv253 = -312						; size = 4
tv249 = -312						; size = 4
tv252 = -308						; size = 4
tv248 = -308						; size = 4
$T163305 = -300						; size = 4
$T163306 = -288						; size = 4
$T163314 = -276						; size = 4
__Ptr$147292 = -72					; size = 4
__Last$ = -60						; size = 12
__First$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 12
__Last_arg$ = 24					; size = 12
?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z PROC ; std::vector<Spot,std::allocator<Spot> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T163314[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1191 : 		iterator _First = _Make_iter(_First_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T163305[ebp], esp
	lea	eax, DWORD PTR __First_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv248[ebp], eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z ; std::vector<Spot,std::allocator<Spot> >::_Make_iter
	mov	DWORD PTR tv249[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T163306[ebp], esp
	lea	eax, DWORD PTR __Last_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv252[ebp], eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z ; std::vector<Spot,std::allocator<Spot> >::_Make_iter
	mov	DWORD PTR tv253[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1193 : 
; 1194 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator<
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@erase
	lea	ecx, DWORD PTR __First$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@erase
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __First$[ebp+8]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@erase
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Last$[ebp+8]
	jae	SHORT $LN2@erase
$LN1@erase:

; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");

	mov	esi, esp
	push	1200					; 000004b0H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@erase:

; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));

	mov	eax, DWORD PTR __First$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+8]
	push	eax
	call	??$_Move@PAUSpot@@PAU1@@std@@YAPAUSpot@@PAU1@00@Z ; std::_Move<Spot *,Spot *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$147292[ebp], eax

; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z ; std::vector<Spot,std::allocator<Spot> >::_Orphan_range

; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));
; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Ptr$147292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXPAUSpot@@0@Z ; std::vector<Spot,std::allocator<Spot> >::_Destroy

; 1211 : 			this->_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$147292[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@erase:

; 1212 : 			}
; 1213 : 		return (_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T163314[ebp]
	or	ecx, 1
	mov	DWORD PTR $T163314[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First_arg$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@erase
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	2
$LN18@erase:
	DD	2
	DD	$LN17@erase
$LN17@erase:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN14@erase
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN15@erase
$LN15@erase:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN14@erase:
	DB	95					; 0000005fH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z$0:
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z$1:
	lea	ecx, DWORD PTR __First_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z$3:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z$5:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z$6:
	mov	eax, DWORD PTR $T163314[ebp]
	and	eax, 1
	je	$LN13@erase
	and	DWORD PTR $T163314[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
$LN13@erase:
	ret	0
__ehhandler$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-316]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@0@Z ENDP ; std::vector<Spot,std::allocator<Spot> >::erase
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 162  : 		{	// get owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv66[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv66[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv66[ebp]

; 164  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBE_NPBUSpot@@@Z
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBE_NPBUSpot@@@Z PROC ; std::vector<Spot,std::allocator<Spot> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1287 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBE_NPBUSpot@@@Z ENDP ; std::vector<Spot,std::allocator<Spot> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z ; std::vector<Spot,std::allocator<Spot> >::reserve
PUBLIC	?_Grow_to@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEII@Z ; std::vector<Spot,std::allocator<Spot> >::_Grow_to
PUBLIC	?capacity@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::capacity
PUBLIC	?_Xlen@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXXZ ; std::vector<Spot,std::allocator<Spot> >::_Xlen
PUBLIC	?max_size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -20						; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXI@Z PROC ; std::vector<Spot,std::allocator<Spot> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::max_size
	sub	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Size$[ebp]
	jae	SHORT $LN4@Reserve

; 1293 : 			_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXXZ ; std::vector<Spot,std::allocator<Spot> >::_Xlen
	jmp	SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

	mov	eax, DWORD PTR __Size$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Size$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::capacity
	cmp	DWORD PTR __Size$[ebp], eax
	ja	SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

	jmp	SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEII@Z ; std::vector<Spot,std::allocator<Spot> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z ; std::vector<Spot,std::allocator<Spot> >::reserve
$LN6@Reserve:

; 1298 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXI@Z ENDP ; std::vector<Spot,std::allocator<Spot> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@USpot@@@std@@QAEXPAUSpot@@I@Z ; std::allocator<Spot>::deallocate
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Tidy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXXZ PROC ; std::vector<Spot,std::allocator<Spot> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXPAUSpot@@0@Z ; std::vector<Spot,std::allocator<Spot> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@USpot@@@std@@QAEXPAUSpot@@I@Z ; std::allocator<Spot>::deallocate
$LN1@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1310 : 		this->_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1311 : 		this->_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1312 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXXZ ENDP ; std::vector<Spot,std::allocator<Spot> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
EXTRN	__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z
_TEXT	SEGMENT
__Pnext$ = -44						; size = 4
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z PROC ; std::vector<Spot,std::allocator<Spot> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1437 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1438 : 		_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1439 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Pnext$[ebp], eax

; 1440 : 		if (_Pnext != 0)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1441 : 			while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran

; 1442 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:

; 1443 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1444 : 				else

	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:

; 1445 : 					{	// orphan the iterator
; 1446 : 					(*_Pnext)->_Clrcont();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1447 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran:

; 1448 : 					}

	jmp	SHORT $LN5@Orphan_ran
$LN6@Orphan_ran:

; 1449 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN13@Orphan_ran:
	DD	1
	DD	$LN12@Orphan_ran
$LN12@Orphan_ran:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXPAUSpot@@0@Z ENDP ; std::vector<Spot,std::allocator<Spot> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 157  : 		{	// disown owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 159  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 167  : 		{	// get address of remaining iterator chain

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 		return (&_Mynextiter);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 169  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
PUBLIC	??$?0USpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USpot@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Spot>
PUBLIC	??0?$allocator@USpot@@@std@@QAE@ABV01@@Z	; std::allocator<Spot>::allocator<Spot>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z
_TEXT	SEGMENT
$T163356 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z PROC ; std::_Vector_val<Spot,std::allocator<Spot> >::_Vector_val<Spot,std::allocator<Spot> >, COMDAT
; _this$ = ecx

; 439  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$allocator@USpot@@@std@@QAE@ABV01@@Z ; std::allocator<Spot>::allocator<Spot>

; 440  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 441  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0USpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USpot@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Spot>

; 442  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 443  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T163356[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 444  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 445  : 
; 446  : 		_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 447  : 		_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 448  : 		_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 449  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@Vector_val@3:
	DD	1
	DD	$LN6@Vector_val@3
$LN6@Vector_val@3:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@3
$LN4@Vector_val@3:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@V?$allocator@USpot@@@1@@Z ENDP ; std::_Vector_val<Spot,std::allocator<Spot> >::_Vector_val<Spot,std::allocator<Spot> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Spot,std::allocator<Spot> >::~_Vector_val<Spot,std::allocator<Spot> >, COMDAT
; _this$ = ecx

; 452  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 453  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 454  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0USpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USpot@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Spot>

; 455  : 		this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 456  : 		_Dest_val(_Alproxy, this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
	add	esp, 8

; 457  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 458  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 459  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Vector_val@4:
	DD	1
	DD	$LN6@Vector_val@4
$LN6@Vector_val@4:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@4
$LN4@Vector_val@4:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Spot,std::allocator<Spot> >::~_Vector_val<Spot,std::allocator<Spot> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@USpot@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@USpot@@@std@@QAE@XZ PROC			; std::allocator<Spot>::allocator<Spot>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@USpot@@@std@@QAE@XZ ENDP			; std::allocator<Spot>::allocator<Spot>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??D?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QBEAAVCameraDriver@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QBEAAVCameraDriver@@XZ PROC ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::operator*, COMDAT
; _this$ = ecx

; 2305 : 		{	// return reference to object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2306 : 		return (*this->_Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 2307 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@QBEAAVCameraDriver@@XZ ENDP ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::operator*
_TEXT	ENDS
PUBLIC	??R?$default_delete@VCameraDriver@@@std@@QBEXPAVCameraDriver@@@Z ; std::default_delete<CameraDriver>::operator()
PUBLIC	?get_deleter@?$_Unique_ptr_base@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@$00@std@@QAEAAU?$default_delete@VCameraDriver@@@2@XZ ; std::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>::get_deleter
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Delete@?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Delete@?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@AAEXXZ PROC ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::_Delete, COMDAT
; _this$ = ecx

; 2342 : 		{	// delete the pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2343 : 		if (this->_Myptr != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Delete

; 2344 : 			this->get_deleter()(this->_Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_deleter@?$_Unique_ptr_base@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@$00@std@@QAEAAU?$default_delete@VCameraDriver@@@2@XZ ; std::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>::get_deleter
	mov	ecx, eax
	call	??R?$default_delete@VCameraDriver@@@std@@QBEXPAVCameraDriver@@@Z ; std::default_delete<CameraDriver>::operator()
$LN2@Delete:

; 2345 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Delete@?$unique_ptr@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@@std@@AAEXXZ ENDP ; std::unique_ptr<CameraDriver,std::default_delete<CameraDriver> >::_Delete
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$default_delete@VCameraDriver@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$default_delete@VCameraDriver@@@std@@QAE@XZ PROC	; std::default_delete<CameraDriver>::default_delete<CameraDriver>, COMDAT
; _this$ = ecx

; 2056 : 	default_delete()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2057 : 		{	// default construct
; 2058 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$default_delete@VCameraDriver@@@std@@QAE@XZ ENDP	; std::default_delete<CameraDriver>::default_delete<CameraDriver>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Unique_ptr_base@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@$00@std@@QAE@PAVCameraDriver@@U?$default_delete@VCameraDriver@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Dt$ = 12						; size = 1
??0?$_Unique_ptr_base@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@$00@std@@QAE@PAVCameraDriver@@U?$default_delete@VCameraDriver@@@1@@Z PROC ; std::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>, COMDAT
; _this$ = ecx

; 2165 : 		{	// construct with pointer and deleter

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax], ecx

; 2166 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Unique_ptr_base@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@$00@std@@QAE@PAVCameraDriver@@U?$default_delete@VCameraDriver@@@1@@Z ENDP ; std::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBE_NPBQAUSpot@@@Z
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBE_NPBQAUSpot@@@Z PROC ; std::vector<Spot *,std::allocator<Spot *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside@2
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside@2
$LN3@Inside@2:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside@2:
	mov	al, BYTE PTR tv76[ebp]

; 1287 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBE_NPBQAUSpot@@@Z ENDP ; std::vector<Spot *,std::allocator<Spot *> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z ; std::vector<Spot *,std::allocator<Spot *> >::reserve
PUBLIC	?_Grow_to@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEII@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Grow_to
PUBLIC	?capacity@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::capacity
PUBLIC	?_Xlen@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXXZ ; std::vector<Spot *,std::allocator<Spot *> >::_Xlen
PUBLIC	?max_size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -20						; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXI@Z PROC ; std::vector<Spot *,std::allocator<Spot *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::max_size
	sub	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Size$[ebp]
	jae	SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXXZ ; std::vector<Spot *,std::allocator<Spot *> >::_Xlen
	jmp	SHORT $LN6@Reserve@2
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

	mov	eax, DWORD PTR __Size$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Size$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::capacity
	cmp	DWORD PTR __Size$[ebp], eax
	ja	SHORT $LN2@Reserve@2

; 1295 : 			;
; 1296 : 		else

	jmp	SHORT $LN6@Reserve@2
$LN2@Reserve@2:

; 1297 : 			reserve(_Grow_to(_Size));

	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEII@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z ; std::vector<Spot *,std::allocator<Spot *> >::reserve
$LN6@Reserve@2:

; 1298 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXI@Z ENDP ; std::vector<Spot *,std::allocator<Spot *> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@I@Z ; std::allocator<Spot *>::deallocate
PUBLIC	?_Destroy@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXPAPAUSpot@@0@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Destroy
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Tidy@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXXZ PROC ; std::vector<Spot *,std::allocator<Spot *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@4

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXPAPAUSpot@@0@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@I@Z ; std::allocator<Spot *>::deallocate
$LN1@Tidy@4:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1310 : 		this->_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1311 : 		this->_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1312 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXXZ ENDP ; std::vector<Spot *,std::allocator<Spot *> >::_Tidy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z
_TEXT	SEGMENT
__Pnext$ = -44						; size = 4
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z PROC ; std::vector<Spot *,std::allocator<Spot *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1437 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1438 : 		_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1439 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Pnext$[ebp], eax

; 1440 : 		if (_Pnext != 0)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran@2
$LN5@Orphan_ran@2:

; 1441 : 			while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran@2

; 1442 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran@2
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran@2
$LN2@Orphan_ran@2:

; 1443 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1444 : 				else

	jmp	SHORT $LN1@Orphan_ran@2
$LN3@Orphan_ran@2:

; 1445 : 					{	// orphan the iterator
; 1446 : 					(*_Pnext)->_Clrcont();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1447 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran@2:

; 1448 : 					}

	jmp	SHORT $LN5@Orphan_ran@2
$LN6@Orphan_ran@2:

; 1449 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN13@Orphan_ran@2:
	DD	1
	DD	$LN12@Orphan_ran@2
$LN12@Orphan_ran@2:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@Orphan_ran@2
$LN10@Orphan_ran@2:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXPAPAUSpot@@0@Z ENDP ; std::vector<Spot *,std::allocator<Spot *> >::_Orphan_range
PUBLIC	??$?0PAUSpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAUSpot@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Spot *>
PUBLIC	??0?$allocator@PAUSpot@@@std@@QAE@ABV01@@Z	; std::allocator<Spot *>::allocator<Spot *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z
_TEXT	SEGMENT
$T163411 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z PROC ; std::_Vector_val<Spot *,std::allocator<Spot *> >::_Vector_val<Spot *,std::allocator<Spot *> >, COMDAT
; _this$ = ecx

; 439  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$allocator@PAUSpot@@@std@@QAE@ABV01@@Z ; std::allocator<Spot *>::allocator<Spot *>

; 440  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 441  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0PAUSpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAUSpot@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Spot *>

; 442  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 443  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T163411[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 444  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 445  : 
; 446  : 		_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 447  : 		_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 448  : 		_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 449  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@Vector_val@5:
	DD	1
	DD	$LN6@Vector_val@5
$LN6@Vector_val@5:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@5
$LN4@Vector_val@5:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@V?$allocator@PAUSpot@@@1@@Z ENDP ; std::_Vector_val<Spot *,std::allocator<Spot *> >::_Vector_val<Spot *,std::allocator<Spot *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Spot *,std::allocator<Spot *> >::~_Vector_val<Spot *,std::allocator<Spot *> >, COMDAT
; _this$ = ecx

; 452  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 453  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 454  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0PAUSpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAUSpot@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Spot *>

; 455  : 		this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 456  : 		_Dest_val(_Alproxy, this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
	add	esp, 8

; 457  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 458  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 459  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Vector_val@6:
	DD	1
	DD	$LN6@Vector_val@6
$LN6@Vector_val@6:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@6
$LN4@Vector_val@6:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Spot *,std::allocator<Spot *> >::~_Vector_val<Spot *,std::allocator<Spot *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAUSpot@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@PAUSpot@@@std@@QAE@XZ PROC		; std::allocator<Spot *>::allocator<Spot *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAUSpot@@@std@@QAE@XZ ENDP		; std::allocator<Spot *>::allocator<Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 911  : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 912  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 913  : 		if (_Count != 0)

	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@assign

; 914  : 			_DEBUG_POINTER(_Ptr);

	push	914					; 00000392H
	push	OFFSET ??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
$LN3@assign:

; 915  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 916  : 
; 917  : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 918  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN4@assign
$LN2@assign:

; 919  : 
; 920  : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 921  : 			{	// make room and assign new stuff
; 922  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 923  : 			_Eos(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 924  : 			}
; 925  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:

; 926  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 893  : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 894  : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign@2

; 895  : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign@2:

; 896  : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 897  : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign@2

; 898  : 			_Num = _Count;	// trim _Num to size

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
$LN4@assign@2:

; 899  : 
; 900  : 		if (this == &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign@2

; 901  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
	push	eax
	mov	ecx, DWORD PTR __Roff$[ebp]
	add	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	edx, DWORD PTR __Roff$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign@2
$LN3@assign@2:

; 902  : 		else if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign@2

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 905  : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign@2:

; 906  : 			}
; 907  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign@2:

; 908  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1511 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1512 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 1513 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$147724 = -20					; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1110 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN3@erase@2

; 1111 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN3@erase@2:

; 1112 : 		if (this->_Mysize - _Off < _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN2@erase@2

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN2@erase@2:

; 1114 : 		if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@erase@2

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Off$[ebp]
	sub	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$147724[ebp], ecx

; 1119 : 			_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$147724[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@erase@2:

; 1120 : 			}
; 1121 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN5@erase@2:

; 1122 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

	mov	esi, esp
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 518  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T163451 = -209						; size = 1
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T163451[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+20], ecx
	lea	edx, DWORD PTR $T163451[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 1955 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 527  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 528  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv129 = -208						; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1960 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	eax, BYTE PTR __Trim$[ebp]
	test	eax, eax
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

	xor	eax, eax
	cmp	eax, DWORD PTR __Newsize$[ebp]
	sbb	eax, eax
	neg	eax
$LN8@Grow:

; 1970 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2003 : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv82[ebp], edx
	jmp	SHORT $LN4@Myptr@2
$LN3@Myptr@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv82[ebp], eax
$LN4@Myptr@2:
	mov	eax, DWORD PTR tv82[ebp]

; 2006 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2015 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2016 : 		_Xlength_error("string too long");

	mov	esi, esp
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xlen:

; 2017 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2020 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2021 : 		_Xout_of_range("invalid string position");

	mov	esi, esp
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xran:

; 2022 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
	add	esp, 12					; 0000000cH

; 1271 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	??$_Umove@PAUSpot@@@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEPAUSpot@@PAU2@00@Z ; std::vector<Spot,std::allocator<Spot> >::_Umove<Spot *>
PUBLIC	?allocate@?$allocator@USpot@@@std@@QAEPAUSpot@@I@Z ; std::allocator<Spot>::allocate
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$148729 = -48					; size = 4
__Ptr$148722 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z PROC ; std::vector<Spot,std::allocator<Spot> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::max_size
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXXZ ; std::vector<Spot,std::allocator<Spot> >::_Xlen
	jmp	$LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?allocate@?$allocator@USpot@@@std@@QAEPAUSpot@@I@Z ; std::allocator<Spot>::allocate
	mov	DWORD PTR __Ptr$148722[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	eax, DWORD PTR __Ptr$148722[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUSpot@@@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEPAUSpot@@PAU2@00@Z ; std::vector<Spot,std::allocator<Spot> >::_Umove<Spot *>
	jmp	SHORT $LN8@reserve
__catch$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$148722[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@USpot@@@std@@QAEXPAUSpot@@I@Z ; std::allocator<Spot>::deallocate

; 757  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 758  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z$1
	ret	0
$LN8@reserve:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::size
	mov	DWORD PTR __Size$148729[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXPAUSpot@@0@Z ; std::vector<Spot,std::allocator<Spot> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@USpot@@@std@@QAEXPAUSpot@@I@Z ; std::allocator<Spot>::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 769  : 			this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 44					; 0000002cH
	add	eax, DWORD PTR __Ptr$148722[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

	mov	eax, DWORD PTR __Size$148729[ebp]
	imul	eax, 44					; 0000002cH
	add	eax, DWORD PTR __Ptr$148722[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 771  : 			this->_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$148722[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Spot,std::allocator<Spot> >::reserve
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?capacity@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?capacity@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ PROC ; std::vector<Spot,std::allocator<Spot> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx

; 778  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ENDP ; std::vector<Spot,std::allocator<Spot> >::capacity
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z$0
__ehfuncinfo$?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T163496 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z PROC ; std::vector<Spot,std::allocator<Spot> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T163496[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 802  : 		return (iterator(_Where._Ptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
	mov	edx, DWORD PTR $T163496[ebp]
	or	edx, 1
	mov	DWORD PTR $T163496[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 803  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z$1:
	mov	eax, DWORD PTR $T163496[ebp]
	and	eax, 1
	je	$LN5@Make_iter
	and	DWORD PTR $T163496[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@XZ
$LN5@Make_iter:
	ret	0
__ehhandler$?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Make_iter@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@2@@Z ENDP ; std::vector<Spot,std::allocator<Spot> >::_Make_iter
PUBLIC	?max_size@?$allocator@USpot@@@std@@QBEIXZ	; std::allocator<Spot>::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?max_size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ PROC ; std::vector<Spot,std::allocator<Spot> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?max_size@?$allocator@USpot@@@std@@QBEIXZ ; std::allocator<Spot>::max_size

; 885  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ENDP ; std::vector<Spot,std::allocator<Spot> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@USpot@@@std@@@std@@YAXPAUSpot@@0AAV?$allocator@USpot@@@0@@Z ; std::_Destroy_range<std::allocator<Spot> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Destroy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXPAUSpot@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXPAUSpot@@0@Z PROC ; std::vector<Spot,std::allocator<Spot> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@USpot@@@std@@@std@@YAXPAUSpot@@0AAV?$allocator@USpot@@@0@@Z ; std::_Destroy_range<std::allocator<Spot> >
	add	esp, 12					; 0000000cH

; 1271 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEXPAUSpot@@0@Z ENDP ; std::vector<Spot,std::allocator<Spot> >::_Destroy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Capacity$ = -20					; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEII@Z PROC ; std::vector<Spot,std::allocator<Spot> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@QBEIXZ ; std::vector<Spot,std::allocator<Spot> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

	mov	eax, DWORD PTR __Capacity$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEII@Z ENDP ; std::vector<Spot,std::allocator<Spot> >::_Grow_to
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXXZ PROC ; std::vector<Spot,std::allocator<Spot> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

	mov	esi, esp
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xlen@2:

; 1428 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IBEXXZ ENDP ; std::vector<Spot,std::allocator<Spot> >::_Xlen
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@USpot@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@USpot@@@std@@QAE@ABV01@@Z PROC		; std::allocator<Spot>::allocator<Spot>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@USpot@@@std@@QAE@ABV01@@Z ENDP		; std::allocator<Spot>::allocator<Spot>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@USpot@@@std@@QAEXPAUSpot@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@USpot@@@std@@QAEXPAUSpot@@I@Z PROC ; std::allocator<Spot>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@USpot@@@std@@QAEXPAUSpot@@I@Z ENDP ; std::allocator<Spot>::deallocate
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??R?$default_delete@VCameraDriver@@@std@@QBEXPAVCameraDriver@@@Z
_TEXT	SEGMENT
tv71 = -232						; size = 4
$T163520 = -224						; size = 4
$T163521 = -212						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??R?$default_delete@VCameraDriver@@@std@@QBEXPAVCameraDriver@@@Z PROC ; std::default_delete<CameraDriver>::operator(), COMDAT
; _this$ = ecx

; 2066 : 		{	// delete a pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2067 : 		if (0 < sizeof (_Ty))	// won't compile for incomplete type

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@operator@4

; 2068 : 			delete _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T163521[ebp], eax
	mov	ecx, DWORD PTR $T163521[ebp]
	mov	DWORD PTR $T163520[ebp], ecx
	cmp	DWORD PTR $T163520[ebp], 0
	je	SHORT $LN4@operator@4
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T163520[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T163520[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN2@operator@4
$LN4@operator@4:
	mov	DWORD PTR tv71[ebp], 0
$LN2@operator@4:

; 2069 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??R?$default_delete@VCameraDriver@@@std@@QBEXPAVCameraDriver@@@Z ENDP ; std::default_delete<CameraDriver>::operator()
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_deleter@?$_Unique_ptr_base@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@$00@std@@QAEAAU?$default_delete@VCameraDriver@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_deleter@?$_Unique_ptr_base@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@$00@std@@QAEAAU?$default_delete@VCameraDriver@@@2@XZ PROC ; std::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>::get_deleter, COMDAT
; _this$ = ecx

; 2176 : 		{	// return reference to deleter

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2177 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 2178 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_deleter@?$_Unique_ptr_base@VCameraDriver@@U?$default_delete@VCameraDriver@@@std@@$00@std@@QAEAAU?$default_delete@VCameraDriver@@@2@XZ ENDP ; std::_Unique_ptr_base<CameraDriver,std::default_delete<CameraDriver>,1>::get_deleter
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAUSpot@@@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEPAPAUSpot@@PAPAU2@00@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Umove<Spot * *>
PUBLIC	?allocate@?$allocator@PAUSpot@@@std@@QAEPAPAUSpot@@I@Z ; std::allocator<Spot *>::allocate
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$148777 = -48					; size = 4
__Ptr$148770 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z PROC ; std::vector<Spot *,std::allocator<Spot *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::max_size
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXXZ ; std::vector<Spot *,std::allocator<Spot *> >::_Xlen
	jmp	$LN7@reserve@2
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN7@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?allocate@?$allocator@PAUSpot@@@std@@QAEPAPAUSpot@@I@Z ; std::allocator<Spot *>::allocate
	mov	DWORD PTR __Ptr$148770[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	eax, DWORD PTR __Ptr$148770[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAUSpot@@@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEPAPAUSpot@@PAPAU2@00@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Umove<Spot * *>
	jmp	SHORT $LN8@reserve@2
__catch$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$148770[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@I@Z ; std::allocator<Spot *>::deallocate

; 757  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 758  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z$1
	ret	0
$LN8@reserve@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::size
	mov	DWORD PTR __Size$148777[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXPAPAUSpot@@0@Z ; std::vector<Spot *,std::allocator<Spot *> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@I@Z ; std::allocator<Spot *>::deallocate
$LN1@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 769  : 			this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$148770[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 770  : 			this->_Mylast = _Ptr + _Size;

	mov	eax, DWORD PTR __Size$148777[ebp]
	mov	ecx, DWORD PTR __Ptr$148770[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 771  : 			this->_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$148770[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN7@reserve@2:

; 772  : 			}
; 773  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Spot *,std::allocator<Spot *> >::reserve
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?capacity@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?capacity@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ PROC ; std::vector<Spot *,std::allocator<Spot *> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 778  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ENDP ; std::vector<Spot *,std::allocator<Spot *> >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAUSpot@@@std@@QBEIXZ	; std::allocator<Spot *>::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?max_size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ PROC ; std::vector<Spot *,std::allocator<Spot *> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?max_size@?$allocator@PAUSpot@@@std@@QBEIXZ ; std::allocator<Spot *>::max_size

; 885  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ENDP ; std::vector<Spot *,std::allocator<Spot *> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAUSpot@@@std@@@std@@YAXPAPAUSpot@@0AAV?$allocator@PAUSpot@@@0@@Z ; std::_Destroy_range<std::allocator<Spot *> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Destroy@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXPAPAUSpot@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXPAPAUSpot@@0@Z PROC ; std::vector<Spot *,std::allocator<Spot *> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAUSpot@@@std@@@std@@YAXPAPAUSpot@@0AAV?$allocator@PAUSpot@@@0@@Z ; std::_Destroy_range<std::allocator<Spot *> >
	add	esp, 12					; 0000000cH

; 1271 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEXPAPAUSpot@@0@Z ENDP ; std::vector<Spot *,std::allocator<Spot *> >::_Destroy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Capacity$ = -20					; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEII@Z PROC ; std::vector<Spot *,std::allocator<Spot *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@QBEIXZ ; std::vector<Spot *,std::allocator<Spot *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to@2
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to@2:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

	mov	eax, DWORD PTR __Capacity$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to@2

; 1280 : 			_Capacity = _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to@2:

; 1281 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEII@Z ENDP ; std::vector<Spot *,std::allocator<Spot *> >::_Grow_to
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXXZ PROC ; std::vector<Spot *,std::allocator<Spot *> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

	mov	esi, esp
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xlen@3:

; 1428 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IBEXXZ ENDP ; std::vector<Spot *,std::allocator<Spot *> >::_Xlen
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUSpot@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAUSpot@@@std@@QAE@ABV01@@Z PROC		; std::allocator<Spot *>::allocator<Spot *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAUSpot@@@std@@QAE@ABV01@@Z ENDP		; std::allocator<Spot *>::allocator<Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@I@Z PROC ; std::allocator<Spot *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@I@Z ENDP ; std::allocator<Spot *>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >

; 305  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator==
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 209  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Compat
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??M?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator<, COMDAT
; _this$ = ecx

; 212  : 		{	// test if this < _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Compat

; 214  : 		return (this->_Ptr < _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	sbb	eax, eax
	neg	eax

; 215  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??M?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator<
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1516 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	eax, DWORD PTR __Num$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv73[ebp], eax
$LN4@max_size:
	mov	eax, DWORD PTR tv73[ebp]

; 1519 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv185 = -248						; size = 4
tv184 = -248						; size = 4
__Ptr$ = -48						; size = 4
__Newres$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 1921 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+24]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], eax
	ja	SHORT $LN5@Copy

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR __Newres$[ebp], ecx

; 1928 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 1929 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR tv184[ebp], eax
	mov	ecx, DWORD PTR tv184[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 1936 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR tv185[ebp], eax
	mov	ecx, DWORD PTR tv185[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1940 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1941 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 1942 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 1946 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1947 : 		this->_Bx._Ptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1948 : 		this->_Myres = _Newres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 1949 : 		_Eos(_Oldlen);

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 1950 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1973 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1974 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside@3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside@3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside@3
$LN2@Inside@3:

; 1975 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside@3

; 1976 : 		else

	jmp	SHORT $LN4@Inside@3
$LN3@Inside@3:

; 1977 : 			return (true);

	mov	al, 1
$LN4@Inside@3:

; 1978 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??$_Allocate@USpot@@@std@@YAPAUSpot@@IPAU1@@Z	; std::_Allocate<Spot>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@USpot@@@std@@QAEPAUSpot@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@USpot@@@std@@QAEPAUSpot@@I@Z PROC	; std::allocator<Spot>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@USpot@@@std@@YAPAUSpot@@IPAU1@@Z ; std::_Allocate<Spot>
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@USpot@@@std@@QAEPAUSpot@@I@Z ENDP	; std::allocator<Spot>::allocate
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@USpot@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@USpot@@@std@@QBEIXZ PROC		; std::allocator<Spot>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 97612893	; 05d1745dH

; 219  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 220  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@USpot@@@std@@QBEIXZ ENDP		; std::allocator<Spot>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@PAUSpot@@@std@@YAPAPAUSpot@@IPAPAU1@@Z ; std::_Allocate<Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@PAUSpot@@@std@@QAEPAPAUSpot@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUSpot@@@std@@QAEPAPAUSpot@@I@Z PROC ; std::allocator<Spot *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAUSpot@@@std@@YAPAPAUSpot@@IPAPAU1@@Z ; std::_Allocate<Spot *>
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAUSpot@@@std@@QAEPAPAUSpot@@I@Z ENDP ; std::allocator<Spot *>::allocate
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAUSpot@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@PAUSpot@@@std@@QBEIXZ PROC	; std::allocator<Spot *>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@3
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@3
$LN3@max_size@3:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@3:
	mov	eax, DWORD PTR tv65[ebp]

; 220  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAUSpot@@@std@@QBEIXZ ENDP	; std::allocator<Spot *>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 46   : 		this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 47   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QAE@PAUSpot@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Compat

; 203  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+8]
	sete	al

; 204  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::operator==
_TEXT	ENDS
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1NM@PKGKNELP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NM@PKGKNELP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1NM@PKGKNELP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'S', 00H
	DB	'p', 00H, 'o', 00H, 't', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'S'
	DB	00H, 'p', 00H, 'o', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '>', 00H, ':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o'
	DB	00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'A', 00H
	DB	'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
CONST	SEGMENT
??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ DB 'Standa'
	DB	'rd C++ Libraries Invalid Argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Compat, COMDAT
; _this$ = ecx

; 234  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 		if (this->_Getcont() == 0
; 236  : 			|| this->_Getcont() != _Right._Getcont())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN1@Compat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	$LN3@Compat
$LN1@Compat:

; 237  : 			{	// report error
; 238  : 			_DEBUG_ERROR("vector iterators incompatible");

	mov	esi, esp
	push	238					; 000000eeH
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 239  : 			_SCL_SECURE_INVALID_ARGUMENT;

	mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
	test	eax, eax
	je	SHORT $LN5@Compat
	xor	ecx, ecx
	jne	SHORT $LN6@Compat
$LN5@Compat:
	mov	esi, esp
	push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@Compat
	int	3
$LN6@Compat:
	mov	esi, esp
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1NM@PKGKNELP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Compat:

; 240  : 			}
; 241  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@USpot@@V?$allocator@USpot@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Spot,std::allocator<Spot> > >::_Compat
_TEXT	ENDS
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator012@Urandom_access_iterator_tag@std@@USpot@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,Spot,int,Spot const *,Spot const &,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 111  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 112  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], -1

; 219  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@4
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@4
$LN3@max_size@4:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@4:
	mov	eax, DWORD PTR tv65[ebp]

; 220  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\tdrol\lib\opencv\build\include\opencv2\core\operations.hpp
_TEXT	ENDS
;	COMDAT ??0?$Point_@H@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$Point_@H@cv@@QAE@XZ PROC				; cv::Point_<int>::Point_<int>, COMDAT
; _this$ = ecx

; 1387 : template<typename _Tp> inline Point_<_Tp>::Point_() : x(0), y(0) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$Point_@H@cv@@QAE@XZ ENDP				; cv::Point_<int>::Point_<int>
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 186  : 	{	// test for string vs. NTCS equality

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 187  : 	return (_Left.compare(_Right) == 0);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	call	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 188  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 1875 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1876 : 		_DEBUG_POINTER(_Ptr);

	push	1876					; 00000754H
	push	OFFSET ??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH

; 1877 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 1878 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT
tv133 = -224						; size = 4
tv134 = -220						; size = 4
tv90 = -220						; size = 4
__Ans$ = -20						; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 1888 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1889 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1890 : 		if (_Count != 0)

	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@compare

; 1891 : 			_DEBUG_POINTER(_Ptr);

	push	1891					; 00000763H
	push	OFFSET ??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
$LN3@compare:

; 1892 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1893 : 
; 1894 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN2@compare

; 1895 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN2@compare:

; 1896 : 		if (this->_Mysize - _Off < _N0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR __N0$[ebp]
	jae	SHORT $LN1@compare

; 1897 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __N0$[ebp], ecx
$LN1@compare:

; 1898 : 
; 1899 : 		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
; 1900 : 			_N0 < _Count ? _N0 : _Count);

	mov	eax, DWORD PTR __N0$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN6@compare
	mov	ecx, DWORD PTR __N0$[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	jmp	SHORT $LN7@compare
$LN6@compare:
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv90[ebp], edx
$LN7@compare:
	mov	eax, DWORD PTR tv90[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	push	eax
	call	?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ans$[ebp], eax

; 1901 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 1902 : 			: _N0 == _Count ? 0 : +1);

	cmp	DWORD PTR __Ans$[ebp], 0
	je	SHORT $LN10@compare
	mov	eax, DWORD PTR __Ans$[ebp]
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN11@compare
$LN10@compare:
	mov	ecx, DWORD PTR __N0$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN8@compare
	mov	DWORD PTR tv133[ebp], -1
	jmp	SHORT $LN9@compare
$LN8@compare:
	mov	edx, DWORD PTR __N0$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	setne	al
	mov	DWORD PTR tv133[ebp], eax
$LN9@compare:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR tv134[ebp], ecx
$LN11@compare:
	mov	eax, DWORD PTR tv134[ebp]
$LN5@compare:

; 1903 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 485  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 486  : 		return (_CSTD memcmp(_First1, _First2, _Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH

; 487  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		; std::_Debug_pointer<char>, COMDAT

; 689  : 	{	// test iterator for non-singularity, const pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 690  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 691  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_poin:

; 692  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ENDP		; std::_Debug_pointer<char>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@$$CBUSpot@@@std@@YAPBUSpot@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUSpot@@@std@@YAPBUSpot@@ABU1@@Z PROC	; std::addressof<Spot const >, COMDAT

; 110  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 112  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@$$CBUSpot@@@std@@YAPBUSpot@@ABU1@@Z ENDP	; std::addressof<Spot const >
_TEXT	ENDS
PUBLIC	??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z ; std::allocator<Spot>::construct<Spot &>
PUBLIC	??$forward@AAUSpot@@@std@@YAAAUSpot@@AAU1@@Z	; std::forward<Spot &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@AAU3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@AAU3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<Spot>,Spot,Spot &>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@AAUSpot@@@std@@YAAAUSpot@@AAU1@@Z ; std::forward<Spot &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z ; std::allocator<Spot>::construct<Spot &>

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@AAU3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<Spot>,Spot,Spot &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@ABU3@@Z ; std::allocator<Spot>::construct
PUBLIC	??$forward@ABUSpot@@@std@@YAABUSpot@@ABU1@@Z	; std::forward<Spot const &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@ABU3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@ABU3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<Spot>,Spot,Spot const &>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@ABUSpot@@@std@@YAABUSpot@@ABU1@@Z ; std::forward<Spot const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@ABU3@@Z ; std::allocator<Spot>::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@ABU3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<Spot>,Spot,Spot const &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$addressof@QAUSpot@@@std@@YAPBQAUSpot@@ABQAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAUSpot@@@std@@YAPBQAUSpot@@ABQAU1@@Z PROC	; std::addressof<Spot * const>, COMDAT

; 110  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 112  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@QAUSpot@@@std@@YAPBQAUSpot@@ABQAU1@@Z ENDP	; std::addressof<Spot * const>
_TEXT	ENDS
PUBLIC	??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z ; std::allocator<Spot *>::construct<Spot * &>
PUBLIC	??$forward@AAPAUSpot@@@std@@YAAAPAUSpot@@AAPAU1@@Z ; std::forward<Spot * &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@PAUSpot@@@std@@PAUSpot@@AAPAU3@@std@@YAXAAV?$allocator@PAUSpot@@@0@PAPAUSpot@@AAPAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAUSpot@@@std@@PAUSpot@@AAPAU3@@std@@YAXAAV?$allocator@PAUSpot@@@0@PAPAUSpot@@AAPAU2@@Z PROC ; std::_Cons_val<std::allocator<Spot *>,Spot *,Spot * &>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@AAPAUSpot@@@std@@YAAAPAUSpot@@AAPAU1@@Z ; std::forward<Spot * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z ; std::allocator<Spot *>::construct<Spot * &>

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@PAUSpot@@@std@@PAUSpot@@AAPAU3@@std@@YAXAAV?$allocator@PAUSpot@@@0@PAPAUSpot@@AAPAU2@@Z ENDP ; std::_Cons_val<std::allocator<Spot *>,Spot *,Spot * &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@ABQAU3@@Z ; std::allocator<Spot *>::construct
PUBLIC	??$forward@ABQAUSpot@@@std@@YAABQAUSpot@@ABQAU1@@Z ; std::forward<Spot * const &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@PAUSpot@@@std@@PAUSpot@@ABQAU3@@std@@YAXAAV?$allocator@PAUSpot@@@0@PAPAUSpot@@ABQAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAUSpot@@@std@@PAUSpot@@ABQAU3@@std@@YAXAAV?$allocator@PAUSpot@@@0@PAPAUSpot@@ABQAU2@@Z PROC ; std::_Cons_val<std::allocator<Spot *>,Spot *,Spot * const &>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@ABQAUSpot@@@std@@YAABQAUSpot@@ABQAU1@@Z ; std::forward<Spot * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@ABQAU3@@Z ; std::allocator<Spot *>::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@PAUSpot@@@std@@PAUSpot@@ABQAU3@@std@@YAXAAV?$allocator@PAUSpot@@@0@PAPAUSpot@@ABQAU2@@Z ENDP ; std::_Cons_val<std::allocator<Spot *>,Spot *,Spot * const &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ; std::allocator<std::_Container_proxy>::construct
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z PROC ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ; std::allocator<std::_Container_proxy>::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ; std::allocator<std::_Container_proxy>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z PROC ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>, COMDAT

; 286  : 	{	// destroy using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 287  : 	_Alval.destroy(_Pdest);

	mov	eax, DWORD PTR __Pdest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ; std::allocator<std::_Container_proxy>::destroy

; 288  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
_TEXT	ENDS
PUBLIC	??$_Move@PAUSpot@@PAU1@@std@@YAPAUSpot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<Spot *,Spot *>
PUBLIC	??$_Ptr_cat@USpot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSpot@@0@Z ; std::_Ptr_cat<Spot,Spot>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUSpot@@PAU1@@std@@YAPAUSpot@@PAU1@00@Z
_TEXT	SEGMENT
$T163672 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUSpot@@PAU1@@std@@YAPAUSpot@@PAU1@00@Z PROC	; std::_Move<Spot *,Spot *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@USpot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSpot@@0@Z ; std::_Ptr_cat<Spot,Spot>
	add	esp, 8
	mov	BYTE PTR $T163672[ebp], al
	movzx	edx, BYTE PTR $T163672[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move@PAUSpot@@PAU1@@std@@YAPAUSpot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<Spot *,Spot *>
	add	esp, 16					; 00000010H

; 2536 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@PAUSpot@@PAU1@@std@@YAPAUSpot@@PAU1@00@Z ENDP	; std::_Move<Spot *,Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0USpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USpot@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0USpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USpot@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Spot>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0USpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USpot@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Spot>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0PAUSpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAUSpot@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0PAUSpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAUSpot@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Spot *>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAUSpot@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAUSpot@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Spot *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
$T163679 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
	add	esp, 8
	mov	BYTE PTR $T163679[ebp], al
	movzx	edx, BYTE PTR $T163679[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
	add	esp, 16					; 00000010H

; 89   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@@Z ; std::_Uninitialized_move<Spot *,Spot *,std::allocator<Spot> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUSpot@@@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEPAUSpot@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUSpot@@@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEPAUSpot@@PAU2@00@Z PROC ; std::vector<Spot,std::allocator<Spot> >::_Umove<Spot *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@@Z ; std::_Uninitialized_move<Spot *,Spot *,std::allocator<Spot> >
	add	esp, 16					; 00000010H

; 1326 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUSpot@@@?$vector@USpot@@V?$allocator@USpot@@@std@@@std@@IAEPAUSpot@@PAU2@00@Z ENDP ; std::vector<Spot,std::allocator<Spot> >::_Umove<Spot *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@USpot@@@std@@@std@@YAXPAUSpot@@0AAV?$allocator@USpot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Spot> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USpot@@@std@@@std@@YAXPAUSpot@@0AAV?$allocator@USpot@@@0@@Z
_TEXT	SEGMENT
$T163684 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USpot@@@std@@@std@@YAXPAUSpot@@0AAV?$allocator@USpot@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Spot> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@USpot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSpot@@0@Z ; std::_Ptr_cat<Spot,Spot>
	add	esp, 8
	mov	BYTE PTR $T163684[ebp], al
	movzx	edx, BYTE PTR $T163684[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@USpot@@@std@@@std@@YAXPAUSpot@@0AAV?$allocator@USpot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Spot> >
	add	esp, 16					; 00000010H

; 89   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@USpot@@@std@@@std@@YAXPAUSpot@@0AAV?$allocator@USpot@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Spot> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAUSpot@@PAPAU1@V?$allocator@PAUSpot@@@std@@@std@@YAPAPAUSpot@@PAPAU1@00AAV?$allocator@PAUSpot@@@0@@Z ; std::_Uninitialized_move<Spot * *,Spot * *,std::allocator<Spot *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAUSpot@@@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEPAPAUSpot@@PAPAU2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAUSpot@@@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEPAPAUSpot@@PAPAU2@00@Z PROC ; std::vector<Spot *,std::allocator<Spot *> >::_Umove<Spot * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAPAUSpot@@PAPAU1@V?$allocator@PAUSpot@@@std@@@std@@YAPAPAUSpot@@PAPAU1@00AAV?$allocator@PAUSpot@@@0@@Z ; std::_Uninitialized_move<Spot * *,Spot * *,std::allocator<Spot *> >
	add	esp, 16					; 00000010H

; 1326 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAUSpot@@@?$vector@PAUSpot@@V?$allocator@PAUSpot@@@std@@@std@@IAEPAPAUSpot@@PAPAU2@00@Z ENDP ; std::vector<Spot *,std::allocator<Spot *> >::_Umove<Spot * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAUSpot@@@std@@@std@@YAXPAPAUSpot@@0AAV?$allocator@PAUSpot@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Spot *> >
PUBLIC	??$_Ptr_cat@PAUSpot@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSpot@@0@Z ; std::_Ptr_cat<Spot *,Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUSpot@@@std@@@std@@YAXPAPAUSpot@@0AAV?$allocator@PAUSpot@@@0@@Z
_TEXT	SEGMENT
$T163689 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAUSpot@@@std@@@std@@YAXPAPAUSpot@@0AAV?$allocator@PAUSpot@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Spot *> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUSpot@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSpot@@0@Z ; std::_Ptr_cat<Spot *,Spot *>
	add	esp, 8
	mov	BYTE PTR $T163689[ebp], al
	movzx	edx, BYTE PTR $T163689[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAUSpot@@@std@@@std@@YAXPAPAUSpot@@0AAV?$allocator@PAUSpot@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Spot *> >
	add	esp, 16					; 00000010H

; 89   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAUSpot@@@std@@@std@@YAXPAPAUSpot@@0AAV?$allocator@PAUSpot@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Spot *> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
$T163692 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T163692[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T163692[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@USpot@@@std@@YAPAUSpot@@IPAU1@@Z
_TEXT	SEGMENT
$T163701 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@USpot@@@std@@YAPAUSpot@@IPAU1@@Z PROC	; std::_Allocate<Spot>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@2

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@2
$LN4@Allocate@2:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 97612893	; 05d1745dH
	ja	SHORT $LN1@Allocate@2
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 44					; 0000002cH
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T163701[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T163701[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@2:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@2:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@USpot@@@std@@YAPAUSpot@@IPAU1@@Z ENDP	; std::_Allocate<Spot>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAUSpot@@@std@@YAPAPAUSpot@@IPAPAU1@@Z
_TEXT	SEGMENT
$T163704 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAUSpot@@@std@@YAPAPAUSpot@@IPAPAU1@@Z PROC ; std::_Allocate<Spot *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@3

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@3
$LN4@Allocate@3:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate@3
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T163704[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T163704[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@3:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@3:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAUSpot@@@std@@YAPAPAUSpot@@IPAPAU1@@Z ENDP ; std::_Allocate<Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T163707 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@4

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@4
$LN4@Allocate@4:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate@4
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T163707[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T163707[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@4:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@4:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z ; std::_Construct<Spot,Spot const &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@ABU3@@Z PROC ; std::allocator<Spot>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z ; std::_Construct<Spot,Spot const &>
	add	esp, 8

; 198  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@ABU3@@Z ENDP ; std::allocator<Spot>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z ; std::_Construct<Spot *,Spot * const &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?construct@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@ABQAU3@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@ABQAU3@@Z PROC ; std::allocator<Spot *>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z ; std::_Construct<Spot *,Spot * const &>
	add	esp, 8

; 198  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@ABQAU3@@Z ENDP ; std::allocator<Spot *>::construct
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z$0
__ehfuncinfo$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T163717 = -236						; size = 4
$T163718 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z PROC ; std::allocator<std::_Container_proxy>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T163718[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T163718[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T163718[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T163718[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T163717[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T163718[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ENDP ; std::allocator<std::_Container_proxy>::construct
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 57   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 58   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 61   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 62   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ; std::_Destroy<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z PROC ; std::allocator<std::_Container_proxy>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ; std::_Destroy<std::_Container_proxy>
	add	esp, 4

; 214  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 516  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 519  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat:
	DD	1
	DD	$LN4@Ptr_cat
$LN4@Ptr_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat
$LN3@Ptr_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAUSpot@@@std@@YAAAUSpot@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUSpot@@@std@@YAAAUSpot@@AAU1@@Z PROC	; std::forward<Spot &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAUSpot@@@std@@YAAAUSpot@@AAU1@@Z ENDP	; std::forward<Spot &>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z
_TEXT	SEGMENT
tv76 = -244						; size = 4
$T163743 = -236						; size = 4
$T163744 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z PROC ; std::allocator<Spot>::construct<Spot &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T163744[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T163744[ebp], 0
	je	SHORT $LN3@construct@2
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@AAUSpot@@@std@@YAAAUSpot@@AAU1@@Z ; std::forward<Spot &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T163744[ebp]
	call	??0Spot@@QAE@ABU0@@Z			; Spot::Spot
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@construct@2
$LN3@construct@2:
	mov	DWORD PTR tv76[ebp], 0
$LN4@construct@2:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T163743[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T163744[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@AAUSpot@@@?$allocator@USpot@@@std@@QAEXPAUSpot@@AAU2@@Z ENDP ; std::allocator<Spot>::construct<Spot &>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUSpot@@@std@@YAABUSpot@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUSpot@@@std@@YAABUSpot@@ABU1@@Z PROC	; std::forward<Spot const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABUSpot@@@std@@YAABUSpot@@ABU1@@Z ENDP	; std::forward<Spot const &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$forward@AAPAUSpot@@@std@@YAAAPAUSpot@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAUSpot@@@std@@YAAAPAUSpot@@AAPAU1@@Z PROC	; std::forward<Spot * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAPAUSpot@@@std@@YAAAPAUSpot@@AAPAU1@@Z ENDP	; std::forward<Spot * &>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z$0
__ehfuncinfo$??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z
_TEXT	SEGMENT
tv73 = -244						; size = 4
$T163760 = -236						; size = 4
$T163761 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z PROC ; std::allocator<Spot *>::construct<Spot * &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T163761[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T163761[ebp], 0
	je	SHORT $LN3@construct@3
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@AAPAUSpot@@@std@@YAAAPAUSpot@@AAPAU1@@Z ; std::forward<Spot * &>
	add	esp, 4
	mov	edx, DWORD PTR $T163761[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T163761[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct@3
$LN3@construct@3:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct@3:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T163760[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T163761[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@AAPAUSpot@@@?$allocator@PAUSpot@@@std@@QAEXPAPAUSpot@@AAPAU2@@Z ENDP ; std::allocator<Spot *>::construct<Spot * &>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABQAUSpot@@@std@@YAABQAUSpot@@ABQAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAUSpot@@@std@@YAABQAUSpot@@ABQAU1@@Z PROC	; std::forward<Spot * const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABQAUSpot@@@std@@YAABQAUSpot@@ABQAU1@@Z ENDP	; std::forward<Spot * const &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@USpot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSpot@@0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@USpot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSpot@@0@Z PROC ; std::_Ptr_cat<Spot,Spot>, COMDAT

; 516  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 519  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat@2:
	DD	1
	DD	$LN4@Ptr_cat@2
$LN4@Ptr_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat@2
$LN3@Ptr_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@USpot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSpot@@0@Z ENDP ; std::_Ptr_cat<Spot,Spot>
_TEXT	ENDS
PUBLIC	??4Spot@@QAEAAU0@ABU0@@Z			; Spot::operator=
PUBLIC	??$move@AAUSpot@@@std@@YA$$QAUSpot@@AAU1@@Z	; std::move<Spot &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Move@PAUSpot@@PAU1@@std@@YAPAUSpot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUSpot@@PAU1@@std@@YAPAUSpot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<Spot *,Spot *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Move
$LN2@Move:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Move:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$move@AAUSpot@@@std@@YA$$QAUSpot@@AAU1@@Z ; std::move<Spot &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	call	??4Spot@@QAEAAU0@ABU0@@Z
	jmp	SHORT $LN2@Move
$LN1@Move:

; 2515 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@PAUSpot@@PAU1@@std@@YAPAUSpot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<Spot *,Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 104  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 105  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Spot *,Spot *,std::allocator<Spot>,Spot>
PUBLIC	??$_Val_type@PAUSpot@@@std@@YAPAUSpot@@PAU1@@Z	; std::_Val_type<Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@@Z
_TEXT	SEGMENT
$T163786 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@@Z PROC ; std::_Uninitialized_move<Spot *,Spot *,std::allocator<Spot> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@USpot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSpot@@0@Z ; std::_Ptr_cat<Spot,Spot>
	add	esp, 8
	mov	BYTE PTR $T163786[ebp], al
	movzx	edx, BYTE PTR $T163786[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAUSpot@@@std@@YAPAUSpot@@PAU1@@Z ; std::_Val_type<Spot *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Spot *,Spot *,std::allocator<Spot>,Spot>
	add	esp, 24					; 00000018H

; 472  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@@Z ENDP ; std::_Uninitialized_move<Spot *,Spot *,std::allocator<Spot> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@USpot@@@std@@USpot@@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@@Z ; std::_Dest_val<std::allocator<Spot>,Spot>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USpot@@@std@@@std@@YAXPAUSpot@@0AAV?$allocator@USpot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@USpot@@@std@@@std@@YAXPAUSpot@@0AAV?$allocator@USpot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Spot> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 96   : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Dest_val@V?$allocator@USpot@@@std@@USpot@@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@@Z ; std::_Dest_val<std::allocator<Spot>,Spot>
	add	esp, 8
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@USpot@@@std@@@std@@YAXPAUSpot@@0AAV?$allocator@USpot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Spot> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUSpot@@PAU1@PAU1@@std@@YAPAPAUSpot@@PAPAU1@00AAV?$allocator@PAUSpot@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Spot *,Spot *,Spot *>
PUBLIC	??$_Val_type@PAPAUSpot@@@std@@YAPAPAUSpot@@PAPAU1@@Z ; std::_Val_type<Spot * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAUSpot@@PAPAU1@V?$allocator@PAUSpot@@@std@@@std@@YAPAPAUSpot@@PAPAU1@00AAV?$allocator@PAUSpot@@@0@@Z
_TEXT	SEGMENT
$T163791 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAUSpot@@PAPAU1@V?$allocator@PAUSpot@@@std@@@std@@YAPAPAUSpot@@PAPAU1@00AAV?$allocator@PAUSpot@@@0@@Z PROC ; std::_Uninitialized_move<Spot * *,Spot * *,std::allocator<Spot *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUSpot@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSpot@@0@Z ; std::_Ptr_cat<Spot *,Spot *>
	add	esp, 8
	mov	BYTE PTR $T163791[ebp], al
	movzx	edx, BYTE PTR $T163791[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAUSpot@@@std@@YAPAPAUSpot@@PAPAU1@@Z ; std::_Val_type<Spot * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAUSpot@@PAU1@PAU1@@std@@YAPAPAUSpot@@PAPAU1@00AAV?$allocator@PAUSpot@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Spot *,Spot *,Spot *>
	add	esp, 24					; 00000018H

; 472  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAUSpot@@PAPAU1@V?$allocator@PAUSpot@@@std@@@std@@YAPAPAUSpot@@PAPAU1@00AAV?$allocator@PAUSpot@@@0@@Z ENDP ; std::_Uninitialized_move<Spot * *,Spot * *,std::allocator<Spot *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUSpot@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSpot@@0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUSpot@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSpot@@0@Z PROC ; std::_Ptr_cat<Spot *,Spot *>, COMDAT

; 516  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 519  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat@3:
	DD	1
	DD	$LN4@Ptr_cat@3
$LN4@Ptr_cat@3:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat@3
$LN3@Ptr_cat@3:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@PAUSpot@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSpot@@0@Z ENDP ; std::_Ptr_cat<Spot *,Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAUSpot@@@std@@@std@@YAXPAPAUSpot@@0AAV?$allocator@PAUSpot@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAUSpot@@@std@@@std@@YAXPAPAUSpot@@0AAV?$allocator@PAUSpot@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Spot *> >, COMDAT

; 104  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 105  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAUSpot@@@std@@@std@@YAXPAPAUSpot@@0AAV?$allocator@PAUSpot@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Spot *> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z
_TEXT	SEGMENT
tv76 = -244						; size = 4
$T163801 = -236						; size = 4
$T163802 = -224						; size = 4
__Vptr$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z PROC ; std::_Construct<Spot,Spot const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T163802[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T163802[ebp], 0
	je	SHORT $LN3@Construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@ABUSpot@@@std@@YAABUSpot@@ABU1@@Z ; std::forward<Spot const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T163802[ebp]
	call	??0Spot@@QAE@ABU0@@Z			; Spot::Spot
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@Construct
$LN3@Construct:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Construct:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T163801[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T163802[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@USpot@@ABU1@@std@@YAXPAUSpot@@ABU1@@Z ENDP ; std::_Construct<Spot,Spot const &>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z$0
__ehfuncinfo$??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z
_TEXT	SEGMENT
tv73 = -244						; size = 4
$T163814 = -236						; size = 4
$T163815 = -224						; size = 4
__Vptr$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z PROC ; std::_Construct<Spot *,Spot * const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T163815[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T163815[ebp], 0
	je	SHORT $LN3@Construct@2
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@ABQAUSpot@@@std@@YAABQAUSpot@@ABQAU1@@Z ; std::forward<Spot * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T163815[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T163815[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@Construct@2
$LN3@Construct@2:
	mov	DWORD PTR tv73[ebp], 0
$LN4@Construct@2:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T163814[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T163815[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@PAUSpot@@ABQAU1@@std@@YAXPAPAUSpot@@ABQAU1@@Z ENDP ; std::_Construct<Spot *,Spot * const &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z PROC ; std::_Destroy<std::_Container_proxy>, COMDAT

; 62   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ENDP ; std::_Destroy<std::_Container_proxy>
_TEXT	ENDS
PUBLIC	??4?$Point_@H@cv@@QAEAAV01@ABV01@@Z		; cv::Point_<int>::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4Spot@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_$S1$156494 = -20					; size = 4
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4Spot@@QAEAAU0@ABU0@@Z PROC				; Spot::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR _$S1$156494[ebp], 0
	jmp	SHORT $LN3@operator@5
$LN2@operator@5:
	mov	eax, DWORD PTR _$S1$156494[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$156494[ebp], eax
$LN3@operator@5:
	cmp	DWORD PTR _$S1$156494[ebp], 4
	jae	SHORT $LN1@operator@5
	mov	eax, DWORD PTR _$S1$156494[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+4]
	push	edx
	mov	eax, DWORD PTR _$S1$156494[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*8+4]
	call	??4?$Point_@H@cv@@QAEAAV01@ABV01@@Z	; cv::Point_<int>::operator=
	jmp	SHORT $LN2@operator@5
$LN1@operator@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4Spot@@QAEAAU0@ABU0@@Z ENDP				; Spot::operator=
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$move@AAUSpot@@@std@@YA$$QAUSpot@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUSpot@@@std@@YA$$QAUSpot@@AAU1@@Z PROC	; std::move<Spot &>, COMDAT

; 86   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAUSpot@@@std@@YA$$QAUSpot@@AAU1@@Z ENDP	; std::move<Spot &>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUSpot@@@std@@YAPAUSpot@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUSpot@@@std@@YAPAUSpot@@PAU1@@Z PROC	; std::_Val_type<Spot *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 790  : 	return (0);

	xor	eax, eax

; 791  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Val_type@PAUSpot@@@std@@YAPAUSpot@@PAU1@@Z ENDP	; std::_Val_type<Spot *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@U3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@$$QAU2@@Z ; std::_Cons_val<std::allocator<Spot>,Spot,Spot>
PUBLIC	??$_Debug_pointer@USpot@@@std@@YAXPAUSpot@@PB_WI@Z ; std::_Debug_pointer<Spot>
PUBLIC	??$_Debug_range@PAUSpot@@@std@@YAXPAUSpot@@0PB_WI@Z ; std::_Debug_range<Spot *>
PUBLIC	??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
;	COMDAT ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
CONST	SEGMENT
??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'm', 00H, 'e', 00H, 'm'
	DB	00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<Spot *,Spot *,std::allocator<Spot>,Spot>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);

	push	425					; 000001a9H
	push	OFFSET ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAUSpot@@@std@@YAXPAUSpot@@0PB_WI@Z ; std::_Debug_range<Spot *>
	add	esp, 16					; 00000010H

; 426  : 	_DEBUG_POINTER(_Dest);

	push	426					; 000001aaH
	push	OFFSET ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@USpot@@@std@@YAXPAUSpot@@PB_WI@Z ; std::_Debug_pointer<Spot>
	add	esp, 12					; 0000000cH

; 427  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@U3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@$$QAU2@@Z ; std::_Cons_val<std::allocator<Spot>,Spot,Spot>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
	jmp	SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

	jmp	SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Dest_val@V?$allocator@USpot@@@std@@USpot@@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@@Z ; std::_Dest_val<std::allocator<Spot>,Spot>
	add	esp, 8
	jmp	SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 436  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUSpot@@PAU1@V?$allocator@USpot@@@std@@U1@@std@@YAPAUSpot@@PAU1@00AAV?$allocator@USpot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Spot *,Spot *,std::allocator<Spot>,Spot>
PUBLIC	?destroy@?$allocator@USpot@@@std@@QAEXPAUSpot@@@Z ; std::allocator<Spot>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@USpot@@@std@@USpot@@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@USpot@@@std@@USpot@@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@@Z PROC ; std::_Dest_val<std::allocator<Spot>,Spot>, COMDAT

; 286  : 	{	// destroy using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 287  : 	_Alval.destroy(_Pdest);

	mov	eax, DWORD PTR __Pdest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?destroy@?$allocator@USpot@@@std@@QAEXPAUSpot@@@Z ; std::allocator<Spot>::destroy

; 288  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Dest_val@V?$allocator@USpot@@@std@@USpot@@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@@Z ENDP ; std::_Dest_val<std::allocator<Spot>,Spot>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAPAUSpot@@@std@@YAPAPAUSpot@@PAPAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAUSpot@@@std@@YAPAPAUSpot@@PAPAU1@@Z PROC ; std::_Val_type<Spot * *>, COMDAT

; 789  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 790  : 	return (0);

	xor	eax, eax

; 791  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Val_type@PAPAUSpot@@@std@@YAPAPAUSpot@@PAPAU1@@Z ENDP ; std::_Val_type<Spot * *>
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@PAUSpot@@@std@@YAXPAPAUSpot@@PB_WI@Z ; std::_Debug_pointer<Spot *>
PUBLIC	??$_Debug_range@PAPAUSpot@@@std@@YAXPAPAUSpot@@0PB_WI@Z ; std::_Debug_range<Spot * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUSpot@@PAU1@PAU1@@std@@YAPAPAUSpot@@PAPAU1@00AAV?$allocator@PAUSpot@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUSpot@@PAU1@PAU1@@std@@YAPAPAUSpot@@PAPAU1@00AAV?$allocator@PAUSpot@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<Spot *,Spot *,Spot *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 457  : 	_DEBUG_RANGE(_First, _Last);

	push	457					; 000001c9H
	push	OFFSET ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAPAUSpot@@@std@@YAXPAPAUSpot@@0PB_WI@Z ; std::_Debug_range<Spot * *>
	add	esp, 16					; 00000010H

; 458  : 	_DEBUG_POINTER(_Dest);

	push	458					; 000001caH
	push	OFFSET ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@PAUSpot@@@std@@YAXPAPAUSpot@@PB_WI@Z ; std::_Debug_pointer<Spot *>
	add	esp, 12					; 0000000cH

; 459  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 462  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAUSpot@@PAU1@PAU1@@std@@YAPAPAUSpot@@PAPAU1@00AAV?$allocator@PAUSpot@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Spot *,Spot *,Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\tdrol\lib\opencv\build\include\opencv2\core\operations.hpp
_TEXT	ENDS
;	COMDAT ??4?$Point_@H@cv@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pt$ = 8						; size = 4
??4?$Point_@H@cv@@QAEAAV01@ABV01@@Z PROC		; cv::Point_<int>::operator=, COMDAT
; _this$ = ecx

; 1396 : { x = pt.x; y = pt.y; return *this; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$Point_@H@cv@@QAEAAV01@ABV01@@Z ENDP		; cv::Point_<int>::operator=
_TEXT	ENDS
PUBLIC	??$_Destroy@USpot@@@std@@YAXPAUSpot@@@Z		; std::_Destroy<Spot>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@USpot@@@std@@QAEXPAUSpot@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@USpot@@@std@@QAEXPAUSpot@@@Z PROC	; std::allocator<Spot>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@USpot@@@std@@YAXPAUSpot@@@Z	; std::_Destroy<Spot>
	add	esp, 4

; 214  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@USpot@@@std@@QAEXPAUSpot@@@Z ENDP	; std::allocator<Spot>::destroy
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAUSpot@@@std@@YAXPAUSpot@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<Spot *>
PUBLIC	??$_Iter_cat@PAUSpot@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSpot@@@Z ; std::_Iter_cat<Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Debug_range@PAUSpot@@@std@@YAXPAUSpot@@0PB_WI@Z
_TEXT	SEGMENT
$T163860 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAUSpot@@@std@@YAXPAUSpot@@0PB_WI@Z PROC ; std::_Debug_range<Spot *>, COMDAT

; 727  : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 728  : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T163860[ebp]
	push	ecx
	call	??$_Iter_cat@PAUSpot@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSpot@@@Z ; std::_Iter_cat<Spot *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAUSpot@@@std@@YAXPAUSpot@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<Spot *>
	add	esp, 20					; 00000014H

; 729  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAUSpot@@@std@@YAXPAUSpot@@0PB_WI@Z ENDP ; std::_Debug_range<Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@USpot@@@std@@YAXPAUSpot@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@USpot@@@std@@YAXPAUSpot@@PB_WI@Z PROC	; std::_Debug_pointer<Spot>, COMDAT

; 696  : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@2

; 698  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_poin@2:

; 699  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@USpot@@@std@@YAXPAUSpot@@PB_WI@Z ENDP	; std::_Debug_pointer<Spot>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z ; std::allocator<Spot>::construct
PUBLIC	??$forward@USpot@@@std@@YA$$QAUSpot@@AAU1@@Z	; std::forward<Spot>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@U3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@U3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<Spot>,Spot,Spot>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@USpot@@@std@@YA$$QAUSpot@@AAU1@@Z ; std::forward<Spot>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z ; std::allocator<Spot>::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@USpot@@@std@@USpot@@U3@@std@@YAXAAV?$allocator@USpot@@@0@PAUSpot@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<Spot>,Spot,Spot>
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAPAUSpot@@@std@@YAXPAPAUSpot@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<Spot * *>
PUBLIC	??$_Iter_cat@PAPAUSpot@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUSpot@@@Z ; std::_Iter_cat<Spot * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Debug_range@PAPAUSpot@@@std@@YAXPAPAUSpot@@0PB_WI@Z
_TEXT	SEGMENT
$T163867 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAPAUSpot@@@std@@YAXPAPAUSpot@@0PB_WI@Z PROC ; std::_Debug_range<Spot * *>, COMDAT

; 727  : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 728  : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T163867[ebp]
	push	ecx
	call	??$_Iter_cat@PAPAUSpot@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUSpot@@@Z ; std::_Iter_cat<Spot * *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAPAUSpot@@@std@@YAXPAPAUSpot@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<Spot * *>
	add	esp, 20					; 00000014H

; 729  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAPAUSpot@@@std@@YAXPAPAUSpot@@0PB_WI@Z ENDP ; std::_Debug_range<Spot * *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@PAUSpot@@@std@@YAXPAPAUSpot@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@PAUSpot@@@std@@YAXPAPAUSpot@@PB_WI@Z PROC ; std::_Debug_pointer<Spot *>, COMDAT

; 696  : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@3

; 698  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_poin@3:

; 699  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@PAUSpot@@@std@@YAXPAPAUSpot@@PB_WI@Z ENDP ; std::_Debug_pointer<Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@USpot@@@std@@YAXPAUSpot@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@USpot@@@std@@YAXPAUSpot@@@Z PROC		; std::_Destroy<Spot>, COMDAT

; 62   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy@USpot@@@std@@YAXPAUSpot@@@Z ENDP		; std::_Destroy<Spot>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z
_TEXT	SEGMENT
tv76 = -244						; size = 4
$T163874 = -236						; size = 4
$T163875 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z PROC ; std::allocator<Spot>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T163875[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T163875[ebp], 0
	je	SHORT $LN3@construct@4
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@USpot@@@std@@YA$$QAUSpot@@AAU1@@Z ; std::forward<Spot>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T163875[ebp]
	call	??0Spot@@QAE@ABU0@@Z			; Spot::Spot
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@construct@4
$LN3@construct@4:
	mov	DWORD PTR tv76[ebp], 0
$LN4@construct@4:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T163874[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T163875[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@USpot@@@std@@QAEXPAUSpot@@$$QAU3@@Z ENDP ; std::allocator<Spot>::construct
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@PAUSpot@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSpot@@@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAUSpot@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSpot@@@Z PROC ; std::_Iter_cat<Spot *>, COMDAT

; 476  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat:
	DD	1
	DD	$LN4@Iter_cat
$LN4@Iter_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat
$LN3@Iter_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAUSpot@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSpot@@@Z ENDP ; std::_Iter_cat<Spot *>
_TEXT	ENDS
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_range2@PAUSpot@@@std@@YAXPAUSpot@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAUSpot@@@std@@YAXPAUSpot@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<Spot *>, COMDAT

; 714  : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 715  : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang

; 716  : 		{	// check for non-null pointers, valid range
; 717  : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@USpot@@@std@@YAXPAUSpot@@PB_WI@Z ; std::_Debug_pointer<Spot>
	add	esp, 12					; 0000000cH

; 718  : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@USpot@@@std@@YAXPAUSpot@@PB_WI@Z ; std::_Debug_pointer<Spot>
	add	esp, 12					; 0000000cH

; 719  : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang

; 720  : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Debug_rang:

; 721  : 		}
; 722  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAUSpot@@@std@@YAXPAUSpot@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<Spot *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@USpot@@@std@@YA$$QAUSpot@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@USpot@@@std@@YA$$QAUSpot@@AAU1@@Z PROC	; std::forward<Spot>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@USpot@@@std@@YA$$QAUSpot@@AAU1@@Z ENDP	; std::forward<Spot>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAPAUSpot@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUSpot@@@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAUSpot@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUSpot@@@Z PROC ; std::_Iter_cat<Spot * *>, COMDAT

; 476  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat@2:
	DD	1
	DD	$LN4@Iter_cat@2
$LN4@Iter_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat@2
$LN3@Iter_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAPAUSpot@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAUSpot@@@Z ENDP ; std::_Iter_cat<Spot * *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_range2@PAPAUSpot@@@std@@YAXPAPAUSpot@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAPAUSpot@@@std@@YAXPAPAUSpot@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<Spot * *>, COMDAT

; 714  : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 715  : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang@2

; 716  : 		{	// check for non-null pointers, valid range
; 717  : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@PAUSpot@@@std@@YAXPAPAUSpot@@PB_WI@Z ; std::_Debug_pointer<Spot *>
	add	esp, 12					; 0000000cH

; 718  : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@PAUSpot@@@std@@YAXPAPAUSpot@@PB_WI@Z ; std::_Debug_pointer<Spot *>
	add	esp, 12					; 0000000cH

; 719  : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang@2

; 720  : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Debug_rang@2:

; 721  : 		}
; 722  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAPAUSpot@@@std@@YAXPAPAUSpot@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<Spot * *>
_TEXT	ENDS
PUBLIC	??_C@_04DAMGJPCA@file?$AA@			; `string'
EXTRN	_atexit:PROC
;	COMDAT ??_C@_04DAMGJPCA@file?$AA@
; File c:\users\tdrol\documents\visual studio 2010\projects\parking\detector\main.cpp
CONST	SEGMENT
??_C@_04DAMGJPCA@file?$AA@ DB 'file', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??__Ecamera_type@@YAXXZ
text$yc	SEGMENT
??__Ecamera_type@@YAXXZ PROC				; `dynamic initializer for 'camera_type'', COMDAT

; 20   : static string camera_type = "file";

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ??_C@_04DAMGJPCA@file?$AA@
	mov	ecx, OFFSET _camera_type
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	push	OFFSET ??__Fcamera_type@@YAXXZ		; `dynamic atexit destructor for 'camera_type''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ecamera_type@@YAXXZ ENDP				; `dynamic initializer for 'camera_type''
text$yc	ENDS
PUBLIC	??_C@_0FE@PFLKLEJE@C?3?1Users?1tdroL?1Documents?1Visual?5@ ; `string'
;	COMDAT ??_C@_0FE@PFLKLEJE@C?3?1Users?1tdroL?1Documents?1Visual?5@
CONST	SEGMENT
??_C@_0FE@PFLKLEJE@C?3?1Users?1tdroL?1Documents?1Visual?5@ DB 'C:/Users/t'
	DB	'droL/Documents/Visual Studio 2010/Projects/parking/assets/Par'
	DB	'king-Lot.jpg', 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??__Ecamera_address@@YAXXZ
text$yc	SEGMENT
??__Ecamera_address@@YAXXZ PROC				; `dynamic initializer for 'camera_address'', COMDAT

; 21   : static string camera_address = "C:/Users/tdroL/Documents/Visual Studio 2010/Projects/parking/assets/Parking-Lot.jpg"; //preview1.jpg";

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ??_C@_0FE@PFLKLEJE@C?3?1Users?1tdroL?1Documents?1Visual?5@
	mov	ecx, OFFSET _camera_address
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	push	OFFSET ??__Fcamera_address@@YAXXZ	; `dynamic atexit destructor for 'camera_address''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Ecamera_address@@YAXXZ ENDP				; `dynamic initializer for 'camera_address''
text$yc	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??__Eoutput_file@@YAXXZ
text$yc	SEGMENT
??__Eoutput_file@@YAXXZ PROC				; `dynamic initializer for 'output_file'', COMDAT

; 22   : static string output_file = "";

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, OFFSET _output_file
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	push	OFFSET ??__Foutput_file@@YAXXZ		; `dynamic atexit destructor for 'output_file''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eoutput_file@@YAXXZ ENDP				; `dynamic initializer for 'output_file''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__Fcamera_type@@YAXXZ
text$yd	SEGMENT
??__Fcamera_type@@YAXXZ PROC				; `dynamic atexit destructor for 'camera_type'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET _camera_type
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fcamera_type@@YAXXZ ENDP				; `dynamic atexit destructor for 'camera_type''
; Function compile flags: /Odtp /RTCsu /ZI
text$yd	ENDS
;	COMDAT ??__Fcamera_address@@YAXXZ
text$yd	SEGMENT
??__Fcamera_address@@YAXXZ PROC				; `dynamic atexit destructor for 'camera_address'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET _camera_address
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fcamera_address@@YAXXZ ENDP				; `dynamic atexit destructor for 'camera_address''
; Function compile flags: /Odtp /RTCsu /ZI
text$yd	ENDS
;	COMDAT ??__Foutput_file@@YAXXZ
text$yd	SEGMENT
??__Foutput_file@@YAXXZ PROC				; `dynamic atexit destructor for 'output_file'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET _output_file
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Foutput_file@@YAXXZ ENDP				; `dynamic atexit destructor for 'output_file''
text$yd	ENDS
_BSS	SEGMENT
_output_file DB	020H DUP (?)
_camera_address DB 020H DUP (?)
_camera_type DB	020H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_camera_type$initializer$ DD FLAT:??__Ecamera_type@@YAXXZ
_camera_address$initializer$ DD FLAT:??__Ecamera_address@@YAXXZ
_output_file$initializer$ DD FLAT:??__Eoutput_file@@YAXXZ
CRT$XCU	ENDS
END
